# =====================================================================
# Script de Release Automatis√© - YouTube to Premiere Pro (Windows)
# =====================================================================
# 
# Utilisation: .\scripts\release.ps1 3.0.15
# Exemple: .\scripts\release.ps1 3.0.15
# 
# Ce script automatise enti√®rement le processus de release :
# 1. Met √† jour les versions dans tous les fichiers
# 2. Commit les changements
# 3. Cr√©e et pousse le tag
# 4. D√©clenche automatiquement le workflow GitHub Actions
# =====================================================================

param(
    [Parameter(Mandatory=$true)]
    [string]$Version
)

# Couleurs pour PowerShell
$Red = "Red"
$Green = "Green"
$Yellow = "Yellow"
$Blue = "Cyan"

# Fonction d'aide
function Show-Usage {
    Write-Host "Usage: .\scripts\release.ps1 <version>" -ForegroundColor $Blue
    Write-Host "Exemple: .\scripts\release.ps1 3.0.15" -ForegroundColor $Yellow
    Write-Host ""
    Write-Host "Ce script automatise enti√®rement le processus de release :"
    Write-Host "‚Ä¢ Met √† jour toutes les versions dans les fichiers"
    Write-Host "‚Ä¢ Commit les changements"
    Write-Host "‚Ä¢ Cr√©e et pousse le tag"
    Write-Host "‚Ä¢ D√©clenche le workflow GitHub Actions"
    exit 1
}

# Valider le format de version (x.y.z)
if (-not ($Version -match "^\d+\.\d+\.\d+$")) {
    Write-Host "‚ùå Erreur: Format de version invalide. Utilisez le format x.y.z (ex: 3.0.15)" -ForegroundColor $Red
    exit 1
}

Write-Host "üöÄ D√©marrage du processus de release pour la version $Version" -ForegroundColor $Blue

# V√©rifier qu'on est dans la racine du projet
if (-not (Test-Path "package.json")) {
    Write-Host "‚ùå Erreur: Ex√©cutez ce script depuis la racine du projet" -ForegroundColor $Red
    exit 1
}

# V√©rifier que git est propre
$gitStatus = git status --porcelain
if ($gitStatus) {
    Write-Host "‚ùå Erreur: Le d√©p√¥t git contient des changements non commit√©s" -ForegroundColor $Red
    Write-Host "Commitez ou stashez vos changements avant de continuer."
    git status --short
    exit 1
}

# V√©rifier qu'on est sur la bonne branche
$currentBranch = git branch --show-current
if ($currentBranch -ne "main" -and $currentBranch -ne "Pre-released") {
    Write-Host "‚ö†Ô∏è Vous √™tes sur la branche '$currentBranch'" -ForegroundColor $Yellow
    Write-Host "   Il est recommand√© d'√™tre sur 'main' ou 'Pre-released'" -ForegroundColor $Yellow
    $response = Read-Host "Continuer quand m√™me ? (y/N)"
    if ($response -ne "y" -and $response -ne "Y") {
        exit 1
    }
}

Write-Host "üìã Mise √† jour des versions dans tous les fichiers..." -ForegroundColor $Blue

# 1. Mettre √† jour package.json
Write-Host "  ‚Üí package.json" -ForegroundColor $Blue
if (Test-Path "package.json") {
    $packageJson = Get-Content "package.json" -Raw | ConvertFrom-Json
    $packageJson.version = $Version
    $packageJson | ConvertTo-Json -Depth 100 | Set-Content "package.json"
    Write-Host "    ‚úÖ Version mise √† jour dans package.json" -ForegroundColor $Green
} else {
    Write-Host "    ‚ö†Ô∏è package.json non trouv√©" -ForegroundColor $Yellow
}

# 2. Mettre √† jour l'extension Chrome
Write-Host "  ‚Üí ChromeExtension/manifest.json" -ForegroundColor $Blue
if (Test-Path "ChromeExtension/manifest.json") {
    $manifestJson = Get-Content "ChromeExtension/manifest.json" -Raw | ConvertFrom-Json
    $manifestJson.version = $Version
    $manifestJson | ConvertTo-Json -Depth 100 | Set-Content "ChromeExtension/manifest.json"
    Write-Host "    ‚úÖ Version mise √† jour dans ChromeExtension/manifest.json" -ForegroundColor $Green
} else {
    Write-Host "    ‚ö†Ô∏è ChromeExtension/manifest.json non trouv√©" -ForegroundColor $Yellow
}

# 3. Mettre √† jour les fichiers de contenu Chrome Extension
Write-Host "  ‚Üí ChromeExtension/background.js" -ForegroundColor $Blue
if (Test-Path "ChromeExtension/background.js") {
    $content = Get-Content "ChromeExtension/background.js" -Raw
    $content = $content -replace "Version \d+\.\d+\.\d+", "Version $Version"
    Set-Content "ChromeExtension/background.js" -Value $content
    Write-Host "    ‚úÖ Version mise √† jour dans background.js" -ForegroundColor $Green
} else {
    Write-Host "    ‚ö†Ô∏è ChromeExtension/background.js non trouv√©" -ForegroundColor $Yellow
}

Write-Host "  ‚Üí ChromeExtension/content.js" -ForegroundColor $Blue
if (Test-Path "ChromeExtension/content.js") {
    $content = Get-Content "ChromeExtension/content.js" -Raw
    $content = $content -replace "Version \d+\.\d+\.\d+", "Version $Version"
    Set-Content "ChromeExtension/content.js" -Value $content
    Write-Host "    ‚úÖ Version mise √† jour dans content.js" -ForegroundColor $Green
} else {
    Write-Host "    ‚ö†Ô∏è ChromeExtension/content.js non trouv√©" -ForegroundColor $Yellow
}

# 4. Mettre √† jour project.config.js
Write-Host "  ‚Üí project.config.js" -ForegroundColor $Blue
if (Test-Path "project.config.js") {
    $content = Get-Content "project.config.js" -Raw
    $content = $content -replace "version: '[^']*'", "version: '$Version'"
    $content = $content -replace "version: `"[^`"]*`"", "version: `"$Version`""
    Set-Content "project.config.js" -Value $content
    Write-Host "    ‚úÖ Version mise √† jour dans project.config.js" -ForegroundColor $Green
} else {
    Write-Host "    ‚ö†Ô∏è project.config.js non trouv√©" -ForegroundColor $Yellow
}

# 5. Mettre √† jour vite.config.ts si n√©cessaire
Write-Host "  ‚Üí vite.config.ts" -ForegroundColor $Blue
if (Test-Path "vite.config.ts") {
    $content = Get-Content "vite.config.ts" -Raw
    $content = $content -replace "const currentVersion = process\.env\.APP_VERSION \|\| '[^']*'", "const currentVersion = process.env.APP_VERSION || '$Version'"
    Set-Content "vite.config.ts" -Value $content
    Write-Host "    ‚úÖ Version mise √† jour dans vite.config.ts" -ForegroundColor $Green
} else {
    Write-Host "    ‚ö†Ô∏è vite.config.ts non trouv√©" -ForegroundColor $Yellow
}

# 6. Utiliser le script existant tools/version-update.js s'il existe
if (Test-Path "tools/version-update.js") {
    Write-Host "  ‚Üí Ex√©cution de tools/version-update.js" -ForegroundColor $Blue
    try {
        node tools/version-update.js $Version
        Write-Host "    ‚úÖ tools/version-update.js ex√©cut√©" -ForegroundColor $Green
    } catch {
        Write-Host "    ‚ö†Ô∏è Erreur lors de l'ex√©cution de version-update.js" -ForegroundColor $Yellow
    }
}

# 7. Mettre √† jour app/routes.py
Write-Host "  ‚Üí app/routes.py" -ForegroundColor $Blue
if (Test-Path "app/routes.py") {
    $content = Get-Content "app/routes.py" -Raw
    $content = $content -replace "return jsonify\(version='[^']*'\)", "return jsonify(version='$Version')"
    $content = $content -replace "current_version = '[^']*'", "current_version = '$Version'"
    Set-Content "app/routes.py" -Value $content
    Write-Host "    ‚úÖ Version mise √† jour dans app/routes.py" -ForegroundColor $Green
} else {
    Write-Host "    ‚ö†Ô∏è app/routes.py non trouv√©" -ForegroundColor $Yellow
}

# 8. Mettre √† jour main.tsx
Write-Host "  ‚Üí src/js/main/main.tsx" -ForegroundColor $Blue
if (Test-Path "src/js/main/main.tsx") {
    $content = Get-Content "src/js/main/main.tsx" -Raw
    $content = $content -replace "const currentVersion = '[^']*'", "const currentVersion = '$Version'"
    Set-Content "src/js/main/main.tsx" -Value $content
    Write-Host "    ‚úÖ Version mise √† jour dans main.tsx" -ForegroundColor $Green
} else {
    Write-Host "    ‚ö†Ô∏è src/js/main/main.tsx non trouv√©" -ForegroundColor $Yellow
}

Write-Host "‚úÖ Toutes les versions ont √©t√© mises √† jour vers $Version" -ForegroundColor $Green

# V√©rifier qu'il y a des changements √† commiter
$gitStatusAfter = git status --porcelain
if (-not $gitStatusAfter) {
    Write-Host "‚ö†Ô∏è Aucun changement d√©tect√©. La version √©tait peut-√™tre d√©j√† $Version" -ForegroundColor $Yellow
    $response = Read-Host "Continuer avec la cr√©ation du tag ? (y/N)"
    if ($response -ne "y" -and $response -ne "Y") {
        exit 1
    }
} else {
    Write-Host "üìù Ajout et commit des changements..." -ForegroundColor $Blue
    
    # Afficher les fichiers modifi√©s
    Write-Host "Fichiers modifi√©s :" -ForegroundColor $Blue
    git status --short
    
    # Ajouter tous les changements
    git add .
    
    # Commit avec un message format√©
    $commitMessage = "chore: bump version to $Version

* Updated package.json version
* Updated Chrome extension manifest version
* Updated project configuration files
* Updated content script version references

Release preparation for v$Version"
    
    git commit -m $commitMessage
    Write-Host "‚úÖ Changements commit√©es" -ForegroundColor $Green
}

# V√©rifier si le tag existe d√©j√†
$existingTag = git tag -l | Where-Object { $_ -eq "v$Version" }
if ($existingTag) {
    Write-Host "‚ùå Erreur: Le tag v$Version existe d√©j√†" -ForegroundColor $Red
    Write-Host "Supprimez-le d'abord avec : git tag -d v$Version"
    Write-Host "Et du remote avec : git push origin :refs/tags/v$Version"
    exit 1
}

Write-Host "üè∑Ô∏è Cr√©ation du tag v$Version..." -ForegroundColor $Blue
$tagMessage = "Release version $Version

üöÄ YouTube to Premiere Pro v$Version

This release includes:
* Updated application version to $Version
* All extensions and manifests updated
* Ready for distribution via GitHub Actions workflow

Auto-generated release via Windows release script."

git tag -a "v$Version" -m $tagMessage
Write-Host "‚úÖ Tag v$Version cr√©√©" -ForegroundColor $Green

Write-Host "üì§ Push des changements et du tag..." -ForegroundColor $Blue

# Pousser la branche actuelle
Write-Host "  ‚Üí Push de la branche $currentBranch" -ForegroundColor $Blue
git push origin $currentBranch

# Pousser le tag
Write-Host "  ‚Üí Push du tag v$Version" -ForegroundColor $Blue
git push origin "v$Version"

Write-Host "‚úÖ Push termin√©" -ForegroundColor $Green

# Information sur le workflow
Write-Host ""
Write-Host "üéâ RELEASE TERMIN√âE AVEC SUCC√àS ! üéâ" -ForegroundColor $Green
Write-Host ""
Write-Host "üìã R√©sum√© :" -ForegroundColor $Blue
Write-Host "   ‚Ä¢ Version mise √† jour : $Version" -ForegroundColor $Green
Write-Host "   ‚Ä¢ Branch: $currentBranch" -ForegroundColor $Green
Write-Host "   ‚Ä¢ Tag cr√©√© : v$Version" -ForegroundColor $Green
Write-Host ""
Write-Host "üîó Actions :" -ForegroundColor $Blue
Write-Host "   ‚Ä¢ GitHub Actions sera d√©clench√© automatiquement"
Write-Host "   ‚Ä¢ V√©rifiez le workflow sur : https://github.com/Selgy/YoutubetoPremiere-V2/actions" -ForegroundColor $Blue
Write-Host ""
Write-Host "üì¶ Artefacts attendus :" -ForegroundColor $Blue
Write-Host "   ‚Ä¢ YoutubetoPremiere_Mac_arm64_$Version.pkg" -ForegroundColor $Green
Write-Host "   ‚Ä¢ YoutubetoPremiere_Win_$Version.exe" -ForegroundColor $Green
Write-Host ""
Write-Host "‚è≥ Le build prend g√©n√©ralement 15-30 minutes..." -ForegroundColor $Yellow

# Proposer d'ouvrir la page GitHub Actions
Write-Host ""
$response = Read-Host "Ouvrir la page GitHub Actions maintenant ? (y/N)"
if ($response -eq "y" -or $response -eq "Y") {
    Start-Process "https://github.com/Selgy/YoutubetoPremiere-V2/actions"
}

Write-Host ""
Write-Host "üéØ Release script termin√© !" -ForegroundColor $Green 