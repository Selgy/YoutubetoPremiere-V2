name: Package ZXP Only

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to tag the release with (e.g. 3.0.5)'
        required: true
        default: '3.0.0'

permissions:
  contents: write
  actions: read
  
jobs:
  package-zxp:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
      
      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile
          yarn global add cross-env
      
      - name: Add global yarn bin to PATH
        run: echo "$(yarn global bin)" >> $GITHUB_PATH
        shell: bash
      
      - name: Create directories
        run: |
          mkdir -p dist/cep/exec/sounds
          mkdir -p backup/exec
        shell: bash
      
      - name: Download latest artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: main.yml
          workflow_conclusion: success
          name_is_regexp: true
          name: .*
          path: artifacts
      
      - name: List downloaded artifacts
        run: |
          ls -la artifacts
        shell: bash
      
      - name: Optimize ZXP packaging process
        shell: bash
        env:
          SKIP_PYTHON_BUILD: true
          NO_PYTHON: true
          ZXP_PACKAGE: true
        run: |
          # Function to copy artifacts with error checking
          copy_artifact() {
            local source=$1
            local dest=$2
            local description=$3
            
            if [ -f "$source" ]; then
              cp "$source" "$dest"
              echo "✓ Copied $description"
            else
              echo "✗ ERROR: $description not found at: $source"
              return 1
            fi
          }
          
          echo "===== PREPARING ZXP PACKAGE ====="
          
          # List the contents of the artifacts directory to see what we have
          echo "Available artifacts:"
          find artifacts -type f | sort
          
          # Create backup of executables
          mkdir -p backup/exec
          
          # Copy all Python files
          echo "Copying Python files..."
          cp app/*.py dist/cep/exec/ 2>/dev/null || echo "No Python files found"
          cp -r app/sounds/* dist/cep/exec/sounds/ 2>/dev/null || echo "No sound files found"
          
          # Copy artifacts efficiently - using find to locate the files
          echo "Copying executables and FFmpeg..."
          
          # Windows executable
          WIN_EXE=$(find artifacts -name "YoutubetoPremiere.exe" | head -1)
          if [ -n "$WIN_EXE" ]; then
            cp "$WIN_EXE" "dist/cep/exec/" && echo "✓ Copied Windows executable"
            cp "$WIN_EXE" "backup/exec/" && echo "✓ Copied Windows executable (backup)"
          else
            echo "✗ ERROR: Windows executable not found!"
          fi
          
          # Windows FFmpeg
          WIN_FFMPEG=$(find artifacts -name "ffmpeg.exe" | head -1)
          if [ -n "$WIN_FFMPEG" ]; then
            cp "$WIN_FFMPEG" "dist/cep/exec/" && echo "✓ Copied Windows FFmpeg"
            cp "$WIN_FFMPEG" "backup/exec/" && echo "✓ Copied Windows FFmpeg (backup)"
          else
            echo "✗ ERROR: Windows FFmpeg not found!"
          fi
          
          # macOS executable
          MAC_EXE=$(find artifacts -name "YoutubetoPremiere" | head -1)
          if [ -n "$MAC_EXE" ]; then
            cp "$MAC_EXE" "dist/cep/exec/" && echo "✓ Copied macOS executable"
            cp "$MAC_EXE" "backup/exec/" && echo "✓ Copied macOS executable (backup)"
          else
            echo "✗ ERROR: macOS executable not found!"
          fi
          
          # macOS FFmpeg
          MAC_FFMPEG=$(find artifacts -name "ffmpeg" -not -name "*.exe" | head -1)
          if [ -n "$MAC_FFMPEG" ]; then
            cp "$MAC_FFMPEG" "dist/cep/exec/" && echo "✓ Copied macOS FFmpeg"
            cp "$MAC_FFMPEG" "backup/exec/" && echo "✓ Copied macOS FFmpeg (backup)"
          else
            echo "✗ ERROR: macOS FFmpeg not found!"
          fi
          
          # Verify files are in place
          echo "Verifying files in dist/cep/exec before yarn zxp:"
          ls -la dist/cep/exec
          
          # Build TypeScript
          echo "Building TypeScript..."
          yarn tsc -p "tsconfig-build.json"
          
          # We'll use a simpler approach - use yarn zxp to create the package, then modify it
          echo "Running initial yarn zxp..."
          yarn zxp
          
          # Verify the ZXP exists
          if [ ! -f "dist/zxp/com.youtubetoPremiereV2.cep.zxp" ]; then
            echo "ERROR: yarn zxp did not create the ZXP package"
            exit 1
          fi
          
          echo "Extracting the ZXP package..."
          mkdir -p zxp_extract
          cp dist/zxp/com.youtubetoPremiereV2.cep.zxp zxp_extract/
          cd zxp_extract
          unzip -q com.youtubetoPremiereV2.cep.zxp -d contents || echo "Could not extract ZXP"
          cd ..
          
          echo "Creating exec directory in the extracted package..."
          mkdir -p zxp_extract/contents/exec
          
          echo "Copying executables to the extracted package..."
          cp backup/exec/* zxp_extract/contents/exec/ 2>/dev/null || echo "No executables found in backup"
          cp app/*.py zxp_extract/contents/exec/ 2>/dev/null || echo "No Python files found"
          mkdir -p zxp_extract/contents/exec/sounds
          cp -r app/sounds/* zxp_extract/contents/exec/sounds/ 2>/dev/null || echo "No sound files found"
          
          echo "Verifying executables are in the extracted package:"
          ls -la zxp_extract/contents/exec
          
          echo "Recreating the ZXP with executables included..."
          cd zxp_extract/contents
          zip -r ../../dist/zxp/com.youtubetoPremiereV2.cep.zxp ./* || echo "Failed to create ZIP file"
          cd ../..
          
          # Verify ZXP was recreated
          if [ -f "dist/zxp/com.youtubetoPremiereV2.cep.zxp" ]; then
            echo "✓ ZXP package recreated successfully at: dist/zxp/com.youtubetoPremiereV2.cep.zxp"
            echo "  Size: $(du -h dist/zxp/com.youtubetoPremiereV2.cep.zxp | cut -f1)"
            
            # Examine ZXP contents to verify executables are included
            echo "Examining ZXP contents to verify executables are included..."
            mkdir -p zxp_verification
            cp dist/zxp/com.youtubetoPremiereV2.cep.zxp zxp_verification/
            cd zxp_verification
            unzip -l com.youtubetoPremiereV2.cep.zxp | grep -i "exec/" || echo "WARNING: No exec files found in ZXP!"
            unzip -l com.youtubetoPremiereV2.cep.zxp | grep -i ".exe" || echo "WARNING: No .exe files found in ZXP!"
            unzip -l com.youtubetoPremiereV2.cep.zxp | grep -i "ffmpeg" || echo "WARNING: No ffmpeg files found in ZXP!"
            cd ..
          else
            echo "✗ ERROR: ZXP package was not recreated!"
            exit 1
          fi
          
          echo "===== ZXP PACKAGING COMPLETED ====="
      
      - name: Verify and Rename ZXP Package
        shell: pwsh
        run: |
          $version = "${{ github.event.inputs.version }}"
          
          if (Test-Path "dist/zxp/com.youtubetoPremiereV2.cep.zxp") {
            # Rename the ZXP file to include the version
            $newName = "YoutubetoPremiere-v$version.zxp"
            Copy-Item -Path "dist/zxp/com.youtubetoPremiereV2.cep.zxp" -Destination "dist/zxp/$newName" -Force
            Write-Host "Renamed ZXP package to: $newName"
            
            # Remove the original file
            Remove-Item -Path "dist/zxp/com.youtubetoPremiereV2.cep.zxp" -Force
            
            # List the files
            Get-ChildItem -Path dist/zxp
          } else {
            Write-Error "ZXP package was not found!"
            exit 1
          }
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./dist/zxp/YoutubetoPremiere-v${{ github.event.inputs.version }}.zxp
          name: YoutubetoPremiere v${{ github.event.inputs.version }}
          tag_name: v${{ github.event.inputs.version }}
          generate_release_notes: true 