name: Package ZXP Only

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to tag the release with (e.g. 3.0.5)'
        required: true
        default: '3.0.0'
      force_rebuild:
        description: 'Force rebuilding all executables'
        type: boolean
        default: false

permissions:
  contents: write
  actions: read
  
jobs:
  build-ffmpeg:
    strategy:
      matrix:
        os: [windows-latest, macos-13]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      # Try to download existing FFmpeg artifact first
      - name: Try downloading existing FFmpeg
        id: download_ffmpeg
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: main.yml
          workflow_conclusion: success
          name: ffmpeg-${{ matrix.os }}
          path: ffmpeg-artifact
          search_artifacts: true
          
      - name: Check for downloaded FFmpeg
        id: check_ffmpeg
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            FFMPEG_PATH="ffmpeg-artifact/ffmpeg.exe"
          else
            FFMPEG_PATH="ffmpeg-artifact/ffmpeg"
          fi
          
          if [[ -f "$FFMPEG_PATH" && "${{ github.event.inputs.force_rebuild }}" != "true" ]]; then
            echo "ffmpeg_exists=true" >> $GITHUB_OUTPUT
            echo "✅ Found existing FFmpeg artifact"
          else
            echo "ffmpeg_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ No existing FFmpeg artifact found or rebuild forced"
          fi
        shell: bash
        
      # Only build if needed
      - name: Install FFmpeg through package manager
        if: steps.check_ffmpeg.outputs.ffmpeg_exists != 'true'
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            choco install ffmpeg -y
            cp "C:/ProgramData/chocolatey/bin/ffmpeg.exe" ./ffmpeg.exe
          else
            brew install ffmpeg
            cp "$(which ffmpeg)" ./ffmpeg
          fi
          echo "FFmpeg installed successfully"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ls -la ./ffmpeg.exe || echo "Windows FFmpeg not found"
          else
            ls -la ./ffmpeg || echo "macOS FFmpeg not found"
          fi
        shell: bash
      
      # Copy from artifact if it exists
      - name: Use existing FFmpeg
        if: steps.check_ffmpeg.outputs.ffmpeg_exists == 'true'
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp "ffmpeg-artifact/ffmpeg.exe" ./ffmpeg.exe
          else
            cp "ffmpeg-artifact/ffmpeg" ./ffmpeg
            chmod +x ./ffmpeg
          fi
          echo "✅ Using existing FFmpeg"
        shell: bash
      
      # Upload in either case
      - name: Upload FFmpeg
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.os }}
          path: ${{ matrix.os == 'windows-latest' && 'ffmpeg.exe' || 'ffmpeg' }}
          retention-days: 90
  
  build-executables:
    strategy:
      matrix:
        os: [windows-latest, macos-13]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Try to download existing executable artifact first
      - name: Try downloading existing executable
        id: download_executable
        continue-on-error: true
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: main.yml
          workflow_conclusion: success
          name: executable-${{ matrix.os }}
          path: executable-artifact
          search_artifacts: true
          
      - name: Check for downloaded executable
        id: check_executable
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            EXE_PATH="executable-artifact/YoutubetoPremiere.exe"
          else
            EXE_PATH="executable-artifact/YoutubetoPremiere"
          fi
          
          # For macOS, always rebuild to apply signature, or if forced to rebuild
          if [[ "${{ matrix.os }}" == "macos-13" || "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "executable_exists=false" >> $GITHUB_OUTPUT
            echo "ℹ️ Will rebuild macOS executable to apply signature or rebuild forced"
          elif [[ -f "$EXE_PATH" ]]; then
            echo "executable_exists=true" >> $GITHUB_OUTPUT
            echo "✅ Found existing executable artifact"
          else
            echo "executable_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ No existing executable artifact found"
          fi
        shell: bash
      
      # Setup and build only if needed
      - name: Setup Python
        if: steps.check_executable.outputs.executable_exists != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'none'
      
      - name: Install Python dependencies
        if: steps.check_executable.outputs.executable_exists != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller python-socketio requests pillow
          
      - name: Build executable with PyInstaller
        if: steps.check_executable.outputs.executable_exists != 'true'
        run: |
          cd app
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            pyinstaller --onefile --name YoutubetoPremiere --icon=images/icon.ico server.py
          else
            pyinstaller --onefile --name YoutubetoPremiere server.py
          fi
          ls -la dist/
        shell: bash
      
      - name: Prepare executable for upload from build
        if: steps.check_executable.outputs.executable_exists != 'true'
        run: |
          mkdir -p ../dist
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp app/dist/YoutubetoPremiere.exe ../dist/
            echo "Windows executable built"
          else
            cp app/dist/YoutubetoPremiere ../dist/
            echo "macOS executable built"
          fi
        shell: bash
        
      - name: Prepare executable for upload from artifact
        if: steps.check_executable.outputs.executable_exists == 'true'
        run: |
          mkdir -p dist
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp executable-artifact/YoutubetoPremiere.exe dist/
            echo "✅ Using existing Windows executable"
          else
            cp executable-artifact/YoutubetoPremiere dist/
            chmod +x dist/YoutubetoPremiere
            echo "✅ Using existing macOS executable"
          fi
        shell: bash
      
      - name: Codesign macOS executable
        if: matrix.os == 'macos-13' && steps.check_executable.outputs.executable_exists != 'true'
        run: |
          # Find identity
          IDENTITY=$(security find-identity -v -p codesigning | grep "Developer ID Application" | head -1 | awk -F '"' '{print $2}')
          if [[ -n "$IDENTITY" ]]; then
            echo "Found signing identity: $IDENTITY"
            codesign --force --options runtime --timestamp --sign "$IDENTITY" dist/YoutubetoPremiere
            echo "Executable signed successfully"
          else
            echo "No signing identity found, using unsigned executable"
          fi
        shell: bash
      
      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: dist/YoutubetoPremiere*
          retention-days: 90

  package-zxp:
    needs: [build-ffmpeg, build-executables]
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
      
      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile
          yarn global add cross-env
      
      - name: Add global yarn bin to PATH
        run: echo "$(yarn global bin)" >> $GITHUB_PATH
        shell: bash
      
      - name: Create directories
        run: |
          mkdir -p dist/cep/exec/sounds
          mkdir -p backup/exec
        shell: bash
      
      - name: Download artifacts from current workflow
        uses: actions/download-artifact@v4
        with:
          path: .
      
      - name: List downloaded artifacts
        run: |
          echo "Checking for artifacts in working directory:"
          find . -maxdepth 2 -type d -name "executable-*" -o -name "ffmpeg-*" | sort
          
          echo "Listing files in artifact directories:"
          find . -name "YoutubetoPremiere*" -o -name "ffmpeg*" | sort
        shell: bash
      
      - name: Create ZXP package
        run: |
          ./.github/scripts/create-zxp.ps1
        shell: pwsh
      
      - name: Upload ZXP package
        uses: actions/upload-artifact@v4
        with:
          name: YoutubetoPremiere-ZXP
          path: dist/zxp/*.zxp
          retention-days: 30
      
      - name: Create Release
        if: github.event.inputs.version != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          draft: true
          files: |
            dist/zxp/*.zxp
            dist/YoutubetoPremiere.exe
            dist/YoutubetoPremiere 