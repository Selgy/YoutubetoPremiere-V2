name: Test Notarization Only

on:
  workflow_dispatch:  # Allow manual triggering
  push:
    branches:
      - test-notarization

jobs:
  test-notarization:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Import Certificate
      env:
        CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
        P12_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/SelgykeyAPP.keychain-db

        # Decode and import certificate from secrets
        echo -n "$CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
        echo "Certificate decoded, size: $(wc -c < $CERTIFICATE_PATH) bytes"

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
        # Import certificate
        echo "Importing certificate with password length: ${#P12_PASSWORD}"
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH

        # Set the keychain
        security list-keychain -d user -s $KEYCHAIN_PATH

        # List certificates to verify import
        echo "Certificates in keychain:"
        security find-identity -p codesigning $KEYCHAIN_PATH

    - name: Test Keychain Profile Creation
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
      run: |
        echo "Testing keychain profile creation..."
        echo "Apple ID length: ${#APPLE_ID}"
        echo "Team ID length: ${#APPLE_TEAM_ID}"
        echo "Password length: ${#APP_SPECIFIC_PASSWORD}"
        
        # Create keychain profile for notarization
        echo "Creating keychain profile..."
        xcrun notarytool store-credentials "test-profile" \
          --apple-id "$APPLE_ID" \
          --team-id "$APPLE_TEAM_ID" \
          --password "$APP_SPECIFIC_PASSWORD"

    - name: Test Simple Notarization
      run: |
        # Create a simple test file to notarize
        echo "Creating test file..."
        mkdir -p test-app/TestApp.app/Contents/MacOS
        echo '#!/bin/bash' > test-app/TestApp.app/Contents/MacOS/TestApp
        echo 'echo "Hello World"' >> test-app/TestApp.app/Contents/MacOS/TestApp
        chmod +x test-app/TestApp.app/Contents/MacOS/TestApp
        
        # Create Info.plist
        cat > test-app/TestApp.app/Contents/Info.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>TestApp</string>
            <key>CFBundleIdentifier</key>
            <string>com.test.testapp</string>
            <key>CFBundleName</key>
            <string>TestApp</string>
            <key>CFBundleVersion</key>
            <string>1.0</string>
        </dict>
        </plist>
        EOF

        # Sign the test app
        echo "Signing test app..."
        codesign --deep --timestamp --options runtime --force --verify --verbose \
          --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" \
          test-app/TestApp.app

        # Create zip for notarization
        echo "Creating notarization archive..."
        ditto -c -k --keepParent test-app/TestApp.app test-notarization.zip

        # Test notarization
        echo "Testing notarization..."
        NOTARIZATION_OUTPUT=$(xcrun notarytool submit test-notarization.zip \
          --keychain-profile "test-profile" \
          --wait \
          --output-format json)
        
        NOTARIZATION_ID=$(echo "$NOTARIZATION_OUTPUT" | jq -r '.id')
        echo "Notarization ID: $NOTARIZATION_ID"
        
        if [[ $NOTARIZATION_ID == "null" ]]; then
            echo "❌ Notarization submission failed."
            echo "Output: $NOTARIZATION_OUTPUT"
            exit 1
        else
            echo "✅ Notarization submission successful!"
            
            # Get notarization info
            echo "Getting notarization info..."
            xcrun notarytool info $NOTARIZATION_ID --keychain-profile "test-profile"
            
            # Get notarization log
            echo "Getting notarization log..."
            xcrun notarytool log $NOTARIZATION_ID --keychain-profile "test-profile"
        fi

    - name: Cleanup
      if: always()
      run: |
        # Clean up keychain
        KEYCHAIN_PATH=$RUNNER_TEMP/SelgykeyAPP.keychain-db
        if [ -f "$KEYCHAIN_PATH" ]; then
          security delete-keychain $KEYCHAIN_PATH || true
        fi 