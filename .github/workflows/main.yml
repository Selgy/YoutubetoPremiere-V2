name: Build and Package

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  check-artifacts:
    runs-on: ubuntu-latest
    outputs:
      ffmpeg-windows: ${{ steps.check-ffmpeg-windows.outputs.windows }}
      ffmpeg-macos: ${{ steps.check-ffmpeg-macos.outputs.macos }}
      executable-windows: ${{ steps.check-executable-windows.outputs.windows }}
      executable-macos: ${{ steps.check-executable-macos.outputs.macos }}
      app-changed: ${{ steps.check-changes.outputs.changed }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      
      - name: Check for Windows FFmpeg
        id: check-ffmpeg-windows
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: ffmpeg-windows-latest
          path: temp
      - run: |
          if [ "${{ steps.check-ffmpeg-windows.conclusion }}" == "success" ]; then
            echo "windows=true" >> "$GITHUB_OUTPUT"
          else
            echo "windows=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check for macOS FFmpeg
        id: check-ffmpeg-macos
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: ffmpeg-macos-latest
          path: temp
      - run: |
          if [ "${{ steps.check-ffmpeg-macos.conclusion }}" == "success" ]; then
            echo "macos=true" >> "$GITHUB_OUTPUT"
          else
            echo "macos=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check for Windows executable
        id: check-executable-windows
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: executable-windows-latest
          path: temp
      - run: |
          if [ "${{ steps.check-executable-windows.conclusion }}" == "success" ]; then
            echo "windows=true" >> "$GITHUB_OUTPUT"
          else
            echo "windows=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check for macOS executable
        id: check-executable-macos
        uses: actions/download-artifact@v3
        continue-on-error: true
        with:
          name: executable-macos-latest
          path: temp
      - run: |
          if [ "${{ steps.check-executable-macos.conclusion }}" == "success" ]; then
            echo "macos=true" >> "$GITHUB_OUTPUT"
          else
            echo "macos=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check for app changes
        id: check-changes
        run: |
          git diff --name-only HEAD^ HEAD > changes.txt
          if grep -q "^app/" changes.txt || grep -q "requirements.txt" changes.txt || grep -q "YoutubetoPremiere.spec" changes.txt; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

  build-ffmpeg:
    needs: check-artifacts
    if: needs.check-artifacts.outputs.ffmpeg-windows == 'false' || needs.check-artifacts.outputs.ffmpeg-macos == 'false'
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Download FFmpeg for Windows
        if: matrix.os == 'windows-latest' && needs.check-artifacts.outputs.ffmpeg-windows == 'false'
        run: |
          $url = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
          Invoke-WebRequest -Uri $url -OutFile ffmpeg.zip
          Expand-Archive ffmpeg.zip -DestinationPath ffmpeg_temp
          New-Item -ItemType Directory -Force -Path src/exec
          Get-ChildItem -Path ffmpeg_temp -Recurse -Filter "ffmpeg.exe" | 
            Select-Object -First 1 | 
            ForEach-Object { Copy-Item $_.FullName -Destination "src/exec/ffmpeg.exe" }
        shell: pwsh

      - name: Download FFmpeg for macOS
        if: matrix.os == 'macos-latest' && needs.check-artifacts.outputs.ffmpeg-macos == 'false'
        run: |
          curl -L https://evermeet.cx/ffmpeg/ffmpeg-6.1.zip -o ffmpeg.zip
          unzip ffmpeg.zip
          mkdir -p src/exec
          mv ffmpeg src/exec/
          chmod +x src/exec/ffmpeg

      - name: Sign FFmpeg (macOS)
        if: matrix.os == 'macos-latest' && needs.check-artifacts.outputs.ffmpeg-macos == 'false'
        env:
          CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          /usr/bin/codesign --force -s "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime src/exec/ffmpeg

      - name: Upload FFmpeg artifact
        uses: actions/upload-artifact@v3
        with:
          name: ffmpeg-${{ matrix.os }}
          path: src/exec/

  build-executables:
    needs: [check-artifacts, build-ffmpeg]
    if: needs.check-artifacts.outputs.app-changed == 'true' || needs.check-artifacts.outputs.executable-windows == 'false' || needs.check-artifacts.outputs.executable-macos == 'false'
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pygame
          
      - name: Download FFmpeg artifact
        uses: actions/download-artifact@v3
        with:
          name: ffmpeg-${{ matrix.os }}
          path: src/exec/
          
      - name: Make FFmpeg executable (macOS)
        if: matrix.os == 'macos-latest'
        run: chmod +x src/exec/ffmpeg
        
      - name: Build executable
        run: python -m PyInstaller YoutubetoPremiere.spec -y --workpath build/work --distpath build/YoutubetoPremiere
        shell: bash

      - name: Sign executable (macOS)
        if: matrix.os == 'macos-latest'
        env:
          CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          /usr/bin/codesign --force -s "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime build/YoutubetoPremiere/YoutubetoPremiere
          find build/YoutubetoPremiere -name "*.dylib" -exec /usr/bin/codesign --force -s "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime {} \;

      - name: Upload executable artifact
        uses: actions/upload-artifact@v3
        with:
          name: executable-${{ matrix.os }}
          path: |
            build/YoutubetoPremiere/**/*
            src/exec/ffmpeg*

  package-zxp:
    needs: [check-artifacts, build-executables]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: |
          yarn install
          yarn add -D typescript
          yarn add -D cross-env

      - name: Create directories
        shell: pwsh
        run: New-Item -ItemType Directory -Force -Path dist/cep/exec
          
      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: executable-windows-latest
          path: artifacts/windows-latest

      - name: Download macOS artifacts
        uses: actions/download-artifact@v3
        with:
          name: executable-macos-latest
          path: artifacts/macos-latest

      - name: Build CEP
        shell: bash
        env:
          SKIP_PYTHON_BUILD: true
        run: |
          yarn clean
          yarn tsc -p "tsconfig-build.json"
          yarn cross-env vite build --force --watch false

      - name: Copy executables and FFmpeg
        shell: pwsh
        run: |
          # Copy Windows files
          Copy-Item -Path "artifacts/windows-latest/build/YoutubetoPremiere/YoutubetoPremiere.exe" -Destination "dist/cep/exec/" -ErrorAction SilentlyContinue
          if (-not $?) { Write-Host "Windows exe not found" }
          Copy-Item -Path "artifacts/windows-latest/src/exec/ffmpeg.exe" -Destination "dist/cep/exec/" -ErrorAction SilentlyContinue
          if (-not $?) { Write-Host "Windows FFmpeg not found" }
          
          # Copy macOS files
          Copy-Item -Path "artifacts/macos-latest/build/YoutubetoPremiere/YoutubetoPremiere" -Destination "dist/cep/exec/" -ErrorAction SilentlyContinue
          if (-not $?) { Write-Host "macOS executable not found" }
          Copy-Item -Path "artifacts/macos-latest/src/exec/ffmpeg" -Destination "dist/cep/exec/" -ErrorAction SilentlyContinue
          if (-not $?) { Write-Host "macOS FFmpeg not found" }

      - name: Package ZXP
        env:
          ZXP_PACKAGE: true
        run: yarn zxp

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./dist/zxp/*.zxp
          generate_release_notes: true
