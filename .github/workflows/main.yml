name: Build and Package

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  actions: read

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      app_changed: ${{ steps.check_app.outputs.changed }}
      tag_version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      
      - name: Check for app changes
        id: check_app
        run: |
          git diff --name-only HEAD^ HEAD > changes.txt
          echo "changed=$(if grep -q '^app/' changes.txt; then echo 'true'; else echo 'false'; fi)" >> $GITHUB_OUTPUT
      
      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

  build-ffmpeg:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-13]
      fail-fast: false
    outputs:
      win_ffmpeg_path: ${{ steps.output_paths.outputs.win_ffmpeg_path }}
      mac_ffmpeg_path: ${{ steps.output_paths.outputs.mac_ffmpeg_path }}
    steps:
      - name: Check FFmpeg cache
        id: ffmpeg-cache
        uses: actions/cache@v4
        with:
          path: |
            ffmpeg${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          key: ffmpeg-${{ matrix.os }}-v2
      
      - name: Output FFmpeg paths
        id: output_paths
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "win_ffmpeg_path=ffmpeg.exe" >> $GITHUB_OUTPUT
          else
            echo "mac_ffmpeg_path=ffmpeg" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Download and process FFmpeg
        if: steps.ffmpeg-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        
      - name: Download FFmpeg for Windows
        if: matrix.os == 'windows-latest' && steps.ffmpeg-cache.outputs.cache-hit != 'true'
        run: |
          $url = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
          Invoke-WebRequest -Uri $url -OutFile ffmpeg.zip
          Expand-Archive ffmpeg.zip -DestinationPath ffmpeg_temp
          Get-ChildItem -Path ffmpeg_temp -Recurse -Filter "ffmpeg.exe" | 
            Select-Object -First 1 | 
            ForEach-Object { Copy-Item $_.FullName -Destination "ffmpeg.exe" }
          Remove-Item -Path ffmpeg.zip -Force
          Remove-Item -Path ffmpeg_temp -Recurse -Force
        shell: pwsh

      - name: Download FFmpeg for macOS
        if: matrix.os == 'macos-13' && steps.ffmpeg-cache.outputs.cache-hit != 'true'
        run: |
          curl -L https://evermeet.cx/ffmpeg/ffmpeg-6.1.zip -o ffmpeg.zip
          unzip ffmpeg.zip
          chmod +x ffmpeg
          rm -f ffmpeg.zip

      - name: Sign FFmpeg (macOS)
        if: matrix.os == 'macos-13' && steps.ffmpeg-cache.outputs.cache-hit != 'true'
        env:
          CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          /usr/bin/codesign --force -s "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime ffmpeg
          rm -f certificate.p12

      - name: Upload FFmpeg artifact
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.os }}
          path: ffmpeg${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          retention-days: 7

  build-executables:
    needs: [check-changes]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-13]
      fail-fast: false
    outputs:
      win_exe_path: ${{ steps.output_paths.outputs.win_exe_path }}
      mac_exe_path: ${{ steps.output_paths.outputs.mac_exe_path }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Output executable paths
        id: output_paths
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "win_exe_path=YoutubetoPremiere.exe" >> $GITHUB_OUTPUT
          else
            echo "mac_exe_path=YoutubetoPremiere" >> $GITHUB_OUTPUT
          fi
        shell: bash
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: '**/requirements.txt'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pyinstaller pygame
        
      - name: Build executable
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            python -m PyInstaller YoutubetoPremiere.spec -y --workpath build/work --distpath ./
          else
            python -m PyInstaller YoutubetoPremiere.local.spec -y --workpath build/work --distpath ./
          fi
      
      - name: Sign executable (macOS)
        if: matrix.os == 'macos-13'
        env:
          CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          /usr/bin/codesign --force -s "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime YoutubetoPremiere
          find . -name "*.dylib" -exec /usr/bin/codesign --force -s "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime {} \;
          rm -f certificate.p12

      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: |
            ${{ matrix.os == 'windows-latest' && 'YoutubetoPremiere.exe' || 'YoutubetoPremiere' }}
          retention-days: 7
          if-no-files-found: error

  package-zxp:
    needs: [check-changes, build-ffmpeg, build-executables]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile
          yarn global add cross-env
        
      - name: Add global yarn bin to PATH
        run: echo "$(yarn global bin)" >> $GITHUB_PATH
        shell: bash
      
      - name: Create directories
        run: |
          mkdir -p dist/cep/exec/sounds
          mkdir -p dist/zxp
        shell: bash

      # Download all artifacts in parallel
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Optimize ZXP packaging process
        shell: bash
        env:
          SKIP_PYTHON_BUILD: true
          NO_PYTHON: true
          ZXP_PACKAGE: true
        run: |
          # Function to copy artifacts with error checking
          copy_artifact() {
            local source=$1
            local dest=$2
            local description=$3
            
            if [ -f "$source" ]; then
              cp "$source" "$dest"
              echo "✓ Copied $description"
            else
              echo "✗ ERROR: $description not found at: $source"
              return 1
            fi
          }
          
          echo "===== PREPARING ZXP PACKAGE ====="
          
          # Create backup of executables
          mkdir -p backup/exec
          
          # Copy all Python files
          echo "Copying Python files..."
          cp app/*.py dist/cep/exec/ 2>/dev/null || echo "No Python files found"
          cp -r app/sounds/* dist/cep/exec/sounds/ 2>/dev/null || echo "No sound files found"
          
          # Copy artifacts efficiently
          echo "Copying executables and FFmpeg..."
          
          # Windows executable
          copy_artifact "artifacts/executable-windows-latest/YoutubetoPremiere.exe" "dist/cep/exec/" "Windows executable"
          copy_artifact "artifacts/executable-windows-latest/YoutubetoPremiere.exe" "backup/exec/" "Windows executable (backup)"
          
          # Windows FFmpeg
          copy_artifact "artifacts/ffmpeg-windows-latest/ffmpeg.exe" "dist/cep/exec/" "Windows FFmpeg"
          copy_artifact "artifacts/ffmpeg-windows-latest/ffmpeg.exe" "backup/exec/" "Windows FFmpeg (backup)"
          
          # macOS executable
          copy_artifact "artifacts/executable-macos-13/YoutubetoPremiere" "dist/cep/exec/" "macOS executable"
          copy_artifact "artifacts/executable-macos-13/YoutubetoPremiere" "backup/exec/" "macOS executable (backup)"
          
          # macOS FFmpeg
          copy_artifact "artifacts/ffmpeg-macos-13/ffmpeg" "dist/cep/exec/" "macOS FFmpeg"
          copy_artifact "artifacts/ffmpeg-macos-13/ffmpeg" "backup/exec/" "macOS FFmpeg (backup)"
          
          # Verify files are in place
          echo "Verifying files in dist/cep/exec before yarn zxp:"
          ls -la dist/cep/exec
          
          # Build TypeScript
          echo "Building TypeScript..."
          yarn tsc -p "tsconfig-build.json"
          
          # Create temp directory with the full extension structure
          echo "Creating temp directory with complete extension structure..."
          mkdir -p temp_extension
          
          # Prepare structure for package without running yarn zxp
          echo "Building extension without yarn zxp..."
          export SKIP_PYTHON_BUILD=true
          export NO_PYTHON=true
          export ZXP_PACKAGE=true
          
          # Copy core extension files from existing dist/cep if they exist
          if [ -d "dist/cep" ]; then
            echo "Copying existing dist/cep files..."
            cp -r dist/cep/* temp_extension/ 2>/dev/null || echo "No existing dist/cep files"
          fi
          
          # Run vite build to generate required files
          echo "Running vite build for required files..."
          cross-env ZXP_PACKAGE=true SKIP_PYTHON_BUILD=true NO_PYTHON=true vite build --force --watch=false
          
          # Copy all assets to temp_extension
          echo "Copying all assets to temp_extension..."
          mkdir -p temp_extension/CSXS
          cp -r dist/cep/CSXS/* temp_extension/CSXS/ 2>/dev/null || echo "No CSXS files"
          cp -r dist/cep/assets temp_extension/ 2>/dev/null || echo "No assets files"
          cp dist/cep/.debug temp_extension/ 2>/dev/null || echo "No .debug file"
          cp -r dist/cep/main temp_extension/ 2>/dev/null || echo "No main files"
          cp -r dist/cep/settings temp_extension/ 2>/dev/null || echo "No settings files"
          cp -r dist/cep/js temp_extension/ 2>/dev/null || echo "No js files"
          cp -r dist/cep/jsx temp_extension/ 2>/dev/null || echo "No jsx files"
          
          # Create exec directory if it doesn't exist
          mkdir -p temp_extension/exec/sounds
          
          # Copy executables from backup to temp_extension
          echo "Copying executables to temp_extension/exec..."
          cp backup/exec/* temp_extension/exec/ 2>/dev/null || echo "No executables found in backup"
          
          # Copy Python files to temp_extension/exec
          echo "Copying Python files to temp_extension/exec..."
          cp app/*.py temp_extension/exec/ 2>/dev/null || echo "No Python files found"
          cp -r app/sounds/* temp_extension/exec/sounds/ 2>/dev/null || echo "No sound files found"
          
          # Verify executables are in temp_extension/exec
          echo "Verifying files in temp_extension/exec:"
          ls -la temp_extension/exec
          
          # Create ZXP package with temp_extension contents
          echo "Creating ZXP package with temp_extension contents..."
          mkdir -p dist/zxp
          cd temp_extension
          
          # Use ZXPSignCmd directly to create ZXP
          echo "Using ZXPSignCmd to create ZXP..."
          
          # Copy existing certificate from node_modules if available
          if [ -f "../node_modules/vite-cep-plugin/lib/.tmp/com.youtubetoPremiereV2.cep-cert.p12" ]; then
            echo "Using existing certificate from vite-cep-plugin..."
            mkdir -p ../certs
            cp "../node_modules/vite-cep-plugin/lib/.tmp/com.youtubetoPremiereV2.cep-cert.p12" ../certs/
          else
            echo "Creating new certificate..."
            mkdir -p ../certs
            npx ZXPSignCmd -selfSignedCert FR CA Selgy com.youtubetoPremiereV2.cep test ../certs/com.youtubetoPremiereV2.cep-cert.p12
          fi
          
          # Create ZXP with all contents including executables
          echo "Creating final ZXP with executables included..."
          npx ZXPSignCmd -sign ./ ../dist/zxp/com.youtubetoPremiereV2.cep.zxp ../certs/com.youtubetoPremiereV2.cep-cert.p12 test -tsa http://timestamp.digicert.com/
          
          cd ..
          
          # Verify executables are in temp_extension after signing
          echo "Verifying files in temp_extension/exec after signing:"
          ls -la temp_extension/exec
          
          # Fallback to yarn zxp if manual packaging failed
          if [ ! -f "dist/zxp/com.youtubetoPremiereV2.cep.zxp" ]; then
            echo "Manual ZXP creation failed, falling back to yarn zxp..."
            yarn zxp
            
            # Create exec directory if it doesn't exist
            mkdir -p dist/cep/exec
            
            # Restore executables from backup
            echo "Restoring executables from backup..."
            cp backup/exec/* dist/cep/exec/ 2>/dev/null || echo "No backup files found to restore"
            
            # Verify files are in place after yarn zxp and restoring backup
            echo "Verifying files after yarn zxp and restoring backup:"
            ls -la dist/cep/exec
            
            # Try to resign the package
            echo "Trying to resign the package with restored executables..."
            npx vite-cep-plugin package
          fi
          
          # Verify ZXP was created
          if [ -f "dist/zxp/com.youtubetoPremiereV2.cep.zxp" ]; then
            echo "✓ ZXP package created successfully at: dist/zxp/com.youtubetoPremiereV2.cep.zxp"
            echo "  Size: $(du -h dist/zxp/com.youtubetoPremiereV2.cep.zxp | cut -f1)"
            
            # Examine ZXP contents to verify executables are included
            echo "Examining ZXP contents to verify executables are included..."
            mkdir -p zxp_verification
            cp dist/zxp/com.youtubetoPremiereV2.cep.zxp zxp_verification/
            cd zxp_verification
            unzip -l com.youtubetoPremiereV2.cep.zxp | grep -i "exec/" || echo "WARNING: No exec files found in ZXP!"
            unzip -l com.youtubetoPremiereV2.cep.zxp | grep -i ".exe" || echo "WARNING: No .exe files found in ZXP!"
            unzip -l com.youtubetoPremiereV2.cep.zxp | grep -i "ffmpeg" || echo "WARNING: No ffmpeg files found in ZXP!"
            cd ..
          else
            echo "✗ ERROR: ZXP package was not created!"
            exit 1
          fi
          
          echo "===== ZXP PACKAGING COMPLETED ====="

      - name: Create ZXP with Executables
        shell: bash
        run: |
          echo "===== CREATING FINAL ZXP WITH EXECUTABLES ====="
          
          # Create a temporary directory for final ZXP contents
          mkdir -p final_zxp/exec
          
          # Extract the current ZXP
          echo "Extracting current ZXP..."
          mkdir -p extracted_zxp
          cp dist/zxp/com.youtubetoPremiereV2.cep.zxp extracted_zxp/
          cd extracted_zxp
          unzip -q com.youtubetoPremiereV2.cep.zxp -d contents || echo "Could not extract ZXP"
          cd ..
          
          # Copy the contents to final directory
          echo "Copying ZXP contents..."
          cp -r extracted_zxp/contents/* final_zxp/ 2>/dev/null || echo "No ZXP contents to copy"
          
          # Create exec directory if it doesn't exist
          mkdir -p final_zxp/exec
          
          # Copy executables from backup
          echo "Adding executables to final ZXP..."
          cp backup/exec/* final_zxp/exec/ 2>/dev/null || echo "No executables found in backup"
          
          # Verify executables are in place
          echo "Verifying executables in final ZXP:"
          ls -la final_zxp/exec
          
          # Package the final ZXP
          echo "Packaging final ZXP..."
          mkdir -p dist/final_zxp
          cd final_zxp
          zip -r ../dist/final_zxp/YoutubetoPremiere-with-execs.zxp * || echo "Failed to create ZIP file"
          cd ..
          
          # Replace the original ZXP with the new one
          echo "Replacing original ZXP with the new one containing executables..."
          cp dist/final_zxp/YoutubetoPremiere-with-execs.zxp dist/zxp/com.youtubetoPremiereV2.cep.zxp || echo "Failed to replace ZXP"
          
          # Verify final ZXP was created
          if [ -f "dist/zxp/com.youtubetoPremiereV2.cep.zxp" ]; then
            echo "✓ Final ZXP package created successfully"
            echo "  Size: $(du -h dist/zxp/com.youtubetoPremiereV2.cep.zxp | cut -f1)"
          else
            echo "✗ ERROR: Final ZXP package was not created!"
            exit 1
          fi
          
          echo "===== FINAL ZXP PACKAGING COMPLETED ====="

      - name: Verify and Rename ZXP Package
        shell: pwsh
        run: |
          $version = "${{ needs.check-changes.outputs.tag_version }}"
          
          if (Test-Path "dist/zxp/com.youtubetoPremiereV2.cep.zxp") {
            # Rename the ZXP file to include the version
            $newName = "YoutubetoPremiere-v$version.zxp"
            Copy-Item -Path "dist/zxp/com.youtubetoPremiereV2.cep.zxp" -Destination "dist/zxp/$newName" -Force
            Write-Host "Renamed ZXP package to: $newName"
            
            # Remove the original file
            Remove-Item -Path "dist/zxp/com.youtubetoPremiereV2.cep.zxp" -Force
            
            # List the files
            Get-ChildItem -Path dist/zxp
          } else {
            Write-Error "ZXP package was not found!"
            exit 1
          }

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./dist/zxp/YoutubetoPremiere-v${{ needs.check-changes.outputs.tag_version }}.zxp
          name: YoutubetoPremiere v${{ needs.check-changes.outputs.tag_version }}
          generate_release_notes: true
