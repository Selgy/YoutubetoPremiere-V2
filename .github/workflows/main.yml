name: Build and Package

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-ffmpeg:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Cache FFmpeg
        id: cache-ffmpeg
        uses: actions/cache@v3
        with:
          path: src/exec
          key: ffmpeg-${{ matrix.os }}-${{ hashFiles('**/main.yml') }}
      
      - name: Download FFmpeg for Windows
        if: matrix.os == 'windows-latest' && steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          $url = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
          Invoke-WebRequest -Uri $url -OutFile ffmpeg.zip
          Expand-Archive ffmpeg.zip -DestinationPath ffmpeg_temp
          New-Item -ItemType Directory -Force -Path src/exec
          Get-ChildItem -Path ffmpeg_temp -Recurse -Filter "ffmpeg.exe" | 
            Select-Object -First 1 | 
            ForEach-Object { Copy-Item $_.FullName -Destination "src/exec/ffmpeg.exe" }
        shell: pwsh

      - name: Download FFmpeg for macOS
        if: matrix.os == 'macos-latest' && steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          curl -L https://evermeet.cx/ffmpeg/ffmpeg-6.1.zip -o ffmpeg.zip
          unzip ffmpeg.zip
          mkdir -p src/exec
          mv ffmpeg src/exec/
          chmod +x src/exec/ffmpeg

      - name: Sign FFmpeg (macOS)
        if: matrix.os == 'macos-latest' && steps.cache-ffmpeg.outputs.cache-hit != 'true'
        env:
          CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          /usr/bin/codesign --force -s "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime src/exec/ffmpeg

      - name: Upload FFmpeg artifact
        uses: actions/upload-artifact@v3
        with:
          name: ffmpeg-${{ matrix.os }}
          path: src/exec/

  build-executables:
    needs: build-ffmpeg
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pygame
          
      - name: Download FFmpeg artifact
        uses: actions/download-artifact@v3
        with:
          name: ffmpeg-${{ matrix.os }}
          path: src/exec/
          
      - name: Make FFmpeg executable (macOS)
        if: matrix.os == 'macos-latest'
        run: chmod +x src/exec/ffmpeg
        
      - name: Build executable
        run: python -m PyInstaller YoutubetoPremiere.spec -y --workpath build/work --distpath build/YoutubetoPremiere
        shell: bash

      - name: Sign executable (macOS)
        if: matrix.os == 'macos-latest'
        env:
          CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          /usr/bin/codesign --force -s "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime build/YoutubetoPremiere/YoutubetoPremiere
          find build/YoutubetoPremiere -name "*.dylib" -exec /usr/bin/codesign --force -s "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime {} \;

      - name: Upload executable artifact
        uses: actions/upload-artifact@v3
        with:
          name: executable-${{ matrix.os }}
          path: |
            build/YoutubetoPremiere/**/*
            src/exec/ffmpeg*

  package-zxp:
    needs: build-executables
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Download artifacts and package
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist/cep/exec
          
          # Download artifacts
          foreach ($os in @('windows-latest', 'macos-latest')) {
            $path = "dist/cep/exec/$os"
            New-Item -ItemType Directory -Force -Path $path
            gh run download -n "executable-$os" -D $path
          }
          
          # Organize files
          Copy-Item -Path "dist/cep/exec/windows-latest/build/YoutubetoPremiere/YoutubetoPremiere.exe" -Destination "dist/cep/exec/" -ErrorAction SilentlyContinue
          if (-not $?) { Write-Host "Windows exe not found" }
          
          Copy-Item -Path "dist/cep/exec/windows-latest/src/exec/ffmpeg.exe" -Destination "dist/cep/exec/" -ErrorAction SilentlyContinue
          if (-not $?) { Write-Host "Windows FFmpeg not found" }
          
          Copy-Item -Path "dist/cep/exec/macos-latest/build/YoutubetoPremiere/YoutubetoPremiere" -Destination "dist/cep/exec/" -ErrorAction SilentlyContinue
          if (-not $?) { Write-Host "macOS executable not found" }
          
          Copy-Item -Path "dist/cep/exec/macos-latest/src/exec/ffmpeg" -Destination "dist/cep/exec/" -ErrorAction SilentlyContinue
          if (-not $?) { Write-Host "macOS FFmpeg not found" }
          
          # Remove temporary directories
          Remove-Item -Path "dist/cep/exec/windows-latest" -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "dist/cep/exec/macos-latest" -Recurse -Force -ErrorAction SilentlyContinue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build ZXP
        env:
          ZXP_PACKAGE: true
          SKIP_PYTHON_BUILD: true
        run: yarn zxp

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./dist/zxp/*.zxp
          generate_release_notes: true
