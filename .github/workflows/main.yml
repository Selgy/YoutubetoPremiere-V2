name: Build and Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      package_only:
        description: 'Uniquement générer les packages (utilise les derniers artefacts)'
        type: boolean
        default: false
      version:
        description: 'Version à utiliser pour la release (ex: 3.0.5)'
        required: false
        default: ''

permissions:
  contents: write
  actions: read

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      should_build: ${{ steps.check_build.outputs.should_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Extract version
        id: get_version
        run: |
          if [[ "${{ github.event.inputs.package_only }}" == "true" && -n "${{ github.event.inputs.version }}" ]]; then
            echo "Version spécifiée manuellement: ${{ github.event.inputs.version }}"
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" && "${{ startsWith(github.ref, 'refs/tags/v') }}" == "true" ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Version extraite du tag: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "Aucune version spécifiée, utilisation de la valeur par défaut"
            echo "version=0.0.0" >> $GITHUB_OUTPUT
          fi
      
      - name: Check if build is needed
        id: check_build
        run: |
          if [[ "${{ github.event.inputs.package_only }}" == "true" ]]; then
            echo "Génération des packages uniquement (skip build)"
            echo "should_build=false" >> $GITHUB_OUTPUT
          else
            echo "Build complet requis"
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

  build-ffmpeg:
    needs: check-version
    if: ${{ needs.check-version.outputs.should_build == 'true' }}
    strategy:
      matrix:
        os: [windows-latest, macos-13]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    outputs:
      windows_ffmpeg_path: ${{ steps.output_paths.outputs.win_ffmpeg_path }}
      macos_ffmpeg_path: ${{ steps.output_paths.outputs.mac_ffmpeg_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install FFmpeg (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install ffmpeg -y
          cp "C:/ProgramData/chocolatey/bin/ffmpeg.exe" ./ffmpeg.exe
        shell: bash
      
      - name: Install FFmpeg (macOS)
        if: matrix.os == 'macos-13'
        run: |
          brew install ffmpeg
          cp "$(which ffmpeg)" ./ffmpeg
        shell: bash
      
      - name: Set output paths
        id: output_paths
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "win_ffmpeg_path=ffmpeg.exe" >> $GITHUB_OUTPUT
          else
            echo "mac_ffmpeg_path=ffmpeg" >> $GITHUB_OUTPUT
          fi
        shell: bash
      
      - name: Upload FFmpeg
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.os }}
          path: ${{ matrix.os == 'windows-latest' && 'ffmpeg.exe' || 'ffmpeg' }}
          retention-days: 90

  build-executables:
    needs: check-version
    if: ${{ needs.check-version.outputs.should_build == 'true' }}
    strategy:
      matrix:
        os: [windows-latest, macos-13]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: ${{ runner.os != 'Windows' && 'pip' || '' }}
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller python-socketio requests pillow python-engineio
      
      - name: Build Windows executable
        if: matrix.os == 'windows-latest'
        run: |
          # Create informative version resource
          $VERSION = "${{ needs.check-version.outputs.version }}"
          echo "Version=$VERSION" > version.txt
          echo "CompanyName=YoutubetoPremiere" >> version.txt
          echo "FileDescription=YouTube to Premiere Pro Extension" >> version.txt
          echo "LegalCopyright=(c) 2024 YoutubetoPremiere" >> version.txt
          echo "OriginalFilename=YoutubetoPremiere.exe" >> version.txt
          echo "ProductName=YouTube to Premiere Pro" >> version.txt
          echo "ProductVersion=$VERSION" >> version.txt

          # Build executable with PyInstaller
          pyinstaller --name YoutubetoPremiere --onefile `
            --add-data "app/sounds;sounds" `
            --hidden-import engineio.async_drivers.threading `
            --hidden-import socketio.async_drivers.threading `
            --hidden-import pkg_resources.py2_warn `
            --version-file version.txt `
            app/YoutubetoPremiere.py
          
          # Create installer with NSIS
          mkdir -p dist/installer
          cp app/*.py dist/YoutubetoPremiere/
          cp -r app/sounds dist/YoutubetoPremiere/
        shell: pwsh
      
      - name: Build macOS executable
        if: matrix.os == 'macos-13'
        run: |
          # Create bundle structure
          mkdir -p dist/YoutubetoPremiere.app/Contents/MacOS
          mkdir -p dist/YoutubetoPremiere.app/Contents/Resources/Python
          mkdir -p dist/YoutubetoPremiere.app/Contents/Resources/sounds
          
          # Create Info.plist
          cat > dist/YoutubetoPremiere.app/Contents/Info.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleDisplayName</key>
              <string>YoutubetoPremiere</string>
              <key>CFBundleExecutable</key>
              <string>YoutubetoPremiere</string>
              <key>CFBundleIdentifier</key>
              <string>com.mickael.YoutubetoPremiere</string>
              <key>CFBundleName</key>
              <string>YoutubetoPremiere</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleShortVersionString</key>
              <string>${{ needs.check-version.outputs.version }}</string>
              <key>NSHighResolutionCapable</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # Create executable script
          cat > dist/YoutubetoPremiere.app/Contents/MacOS/YoutubetoPremiere << EOF
          #!/bin/bash
          set -e
          
          # Get the directory where this script is located
          DIR="\$( cd "\$( dirname "\${BASH_SOURCE[0]}" )" && pwd )"
          PARENT_DIR="\$( dirname "\$DIR" )"
          RESOURCES_DIR="\$PARENT_DIR/Resources"
          PYTHON_DIR="\$RESOURCES_DIR/Python"
          
          # Find Python 3 on the system
          PYTHON_BIN=\$(which python3)
          if [ ! -x "\$PYTHON_BIN" ]; then
              PYTHON_BIN=\$(which python)
          fi
          
          # Export environment variables
          export PYTHONPATH="\$PYTHON_DIR:\$PYTHONPATH"
          export PATH="\$DIR:\$PATH"
          
          # Run Python script
          cd "\$RESOURCES_DIR"
          "\$PYTHON_BIN" "\$PYTHON_DIR/YoutubetoPremiere.py" "\$@"
          EOF
          
          # Copy Python files and resources
          cp app/*.py dist/YoutubetoPremiere.app/Contents/Resources/Python/
          cp -r app/sounds/* dist/YoutubetoPremiere.app/Contents/Resources/sounds/ || true
          
          # Make script executable
          chmod +x dist/YoutubetoPremiere.app/Contents/MacOS/YoutubetoPremiere
          
          # Create a single binary executable for CLI use
          cat > dist/YoutubetoPremiere << EOF
          #!/bin/bash
          set -e
          
          # Get the absolute path of this script
          SCRIPT_PATH="\$( cd "\$(dirname "\$0")" && pwd )/\$(basename "\$0")"
          SCRIPT_DIR="\$(dirname "\$SCRIPT_PATH")"
          
          # Find Python 3 on the system
          PYTHON_BIN=\$(which python3)
          if [ ! -x "\$PYTHON_BIN" ]; then
              PYTHON_BIN=\$(which python)
          fi
          
          if [ ! -x "\$PYTHON_BIN" ]; then
              echo "Error: Python 3 is required but was not found on your system."
              exit 1
          fi
          
          APP_FILE="\$SCRIPT_DIR/YoutubetoPremiere.py"
          if [ ! -f "\$APP_FILE" ]; then
              APP_FILE="\$SCRIPT_DIR/app/YoutubetoPremiere.py"
          fi
          
          echo "Using Python: \$PYTHON_BIN"
          echo "Using app file: \$APP_FILE"
          
          # Run Python script with the full path
          exec "\$PYTHON_BIN" "\$APP_FILE" "\$@"
          EOF
          
          chmod +x dist/YoutubetoPremiere
        shell: bash
      
      - name: Sign and Notarize macOS App
        if: matrix.os == 'macos-13' && env.APPLE_ID != ''
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          SIGNING_CERTIFICATE: ${{ secrets.SIGNING_CERTIFICATE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Import certificate
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          echo -n "$SIGNING_CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH
          
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate
          security import $CERTIFICATE_PATH -P "$KEYCHAIN_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Create entitlements.plist
          cat > entitlements.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.network.client</key>
              <true/>
              <key>com.apple.security.files.user-selected.read-write</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # Sign the app
          SIGNATURE_ID=$(security find-identity -v -p codesigning | grep "Developer ID Application" | head -1 | awk -F '"' '{print $2}')
          
          if [[ -n "$SIGNATURE_ID" ]]; then
            echo "Signing app with identity: $SIGNATURE_ID"
            codesign --force --options runtime --entitlements entitlements.plist --sign "$SIGNATURE_ID" "dist/YoutubetoPremiere.app"
            codesign --force --options runtime --entitlements entitlements.plist --sign "$SIGNATURE_ID" "dist/YoutubetoPremiere"
            
            # Create DMG
            mkdir -p dist/dmg-contents
            cp -r dist/YoutubetoPremiere.app dist/dmg-contents/
            cp scripts/fix-macos-permissions.sh dist/dmg-contents/
            
            hdiutil create -volname "YoutubetoPremiere-${{ needs.check-version.outputs.version }}" \
              -srcfolder dist/dmg-contents \
              -ov -format UDZO \
              "dist/YoutubetoPremiere-${{ needs.check-version.outputs.version }}.dmg"
            
            # Sign DMG
            codesign --force --sign "$SIGNATURE_ID" "dist/YoutubetoPremiere-${{ needs.check-version.outputs.version }}.dmg"
            
            # Notarize
            xcrun notarytool submit "dist/YoutubetoPremiere-${{ needs.check-version.outputs.version }}.dmg" \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_APP_PASSWORD" \
              --team-id "$APPLE_TEAM_ID" \
              --wait
            
            # Staple
            xcrun stapler staple "dist/YoutubetoPremiere-${{ needs.check-version.outputs.version }}.dmg"
          else
            echo "No signing identity found, skipping signing and notarization"
          fi
        shell: bash
      
      - name: Create Windows Installer
        if: matrix.os == 'windows-latest'
        run: |
          # Download NSIS
          Invoke-WebRequest -Uri "https://nsis.sourceforge.io/mediawiki/images/c/c9/Winget-NSIS-3.09.zip" -OutFile "nsis.zip"
          Expand-Archive -Path "nsis.zip" -DestinationPath "C:\NSIS"
          $NsisPath = "C:\NSIS\makensis.exe"
          
          # Create installer script
          $InstallerScript = @"
          !include "MUI2.nsh"
          !include "FileFunc.nsh"
          
          Name "YouTube to Premiere Pro"
          OutFile "YoutubetoPremiere-${{ needs.check-version.outputs.version }}-Setup.exe"
          InstallDir "\$PROGRAMFILES\YoutubetoPremiere"
          
          !define MUI_ICON "app\sounds\icon.ico"
          !define MUI_UNICON "app\sounds\icon.ico"
          
          !insertmacro MUI_PAGE_WELCOME
          !insertmacro MUI_PAGE_DIRECTORY
          !insertmacro MUI_PAGE_INSTFILES
          !insertmacro MUI_PAGE_FINISH
          
          !insertmacro MUI_UNPAGE_CONFIRM
          !insertmacro MUI_UNPAGE_INSTFILES
          
          !insertmacro MUI_LANGUAGE "English"
          
          Section "Install"
            SetOutPath "\$INSTDIR"
            
            # Application Files
            File /r "dist\YoutubetoPremiere\*.*"
            
            # Add the ZXP to the installer
            CreateDirectory "\$INSTDIR\zxp"
            File /oname="\$INSTDIR\zxp\YoutubetoPremiere-${{ needs.check-version.outputs.version }}.zxp" "dist\zxp\YoutubetoPremiere-v${{ needs.check-version.outputs.version }}.zxp"
            
            # Create shortcut
            CreateDirectory "\$SMPROGRAMS\YouTube to Premiere Pro"
            CreateShortcut "\$SMPROGRAMS\YouTube to Premiere Pro\YouTube to Premiere Pro.lnk" "\$INSTDIR\YoutubetoPremiere.exe"
            
            # Create uninstaller
            WriteUninstaller "\$INSTDIR\uninstall.exe"
            
            # Add uninstall information to Add/Remove Programs
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\YoutubetoPremiere" "DisplayName" "YouTube to Premiere Pro"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\YoutubetoPremiere" "UninstallString" '"\$INSTDIR\uninstall.exe"'
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\YoutubetoPremiere" "DisplayIcon" '"\$INSTDIR\YoutubetoPremiere.exe"'
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\YoutubetoPremiere" "Publisher" "YoutubetoPremiere"
            WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\YoutubetoPremiere" "DisplayVersion" "${{ needs.check-version.outputs.version }}"
            
            # Get install size
            \${GetSize} "\$INSTDIR" "/S=0K" \$0 \$1 \$2
            IntFmt \$0 "0x%08X" \$0
            WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\YoutubetoPremiere" "EstimatedSize" "\$0"
          SectionEnd
          
          Section "Uninstall"
            # Remove application files
            RMDir /r "\$INSTDIR\*.*"
            
            # Remove shortcuts
            Delete "\$SMPROGRAMS\YouTube to Premiere Pro\*.*"
            RMDir "\$SMPROGRAMS\YouTube to Premiere Pro"
            
            # Remove registry entries
            DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\YoutubetoPremiere"
            
            # Remove install directory if empty
            RMDir "\$INSTDIR"
          SectionEnd
          "@
          
          # Create the installer script file
          Set-Content -Path "installer.nsi" -Value $InstallerScript
          
          # Create output directory
          New-Item -ItemType Directory -Path "dist\installer" -Force | Out-Null
          
          # Run NSIS to create installer
          if (Test-Path $NsisPath) {
            & $NsisPath "installer.nsi"
            Move-Item -Path "YoutubetoPremiere-${{ needs.check-version.outputs.version }}-Setup.exe" -Destination "dist\installer\" -Force
            Write-Output "Installer created: dist\installer\YoutubetoPremiere-${{ needs.check-version.outputs.version }}-Setup.exe"
          } else {
            Write-Error "NSIS not found at $NsisPath. Installer creation failed."
            exit 1
          }
        shell: pwsh
      
      - name: Upload Windows executable
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: executable-windows-latest
          path: dist/YoutubetoPremiere.exe
          retention-days: 90
      
      - name: Upload macOS executable
        if: matrix.os == 'macos-13'
        uses: actions/upload-artifact@v4
        with:
          name: executable-macos-13
          path: |
            dist/YoutubetoPremiere
            dist/YoutubetoPremiere.app/**/*
          retention-days: 90
      
      - name: Upload Windows installer
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: installer-windows
          path: dist/installer/YoutubetoPremiere-${{ needs.check-version.outputs.version }}-Setup.exe
          retention-days: 90
      
      - name: Upload macOS installer
        if: matrix.os == 'macos-13' && env.APPLE_ID != ''
        uses: actions/upload-artifact@v4
        with:
          name: installer-macos
          path: dist/YoutubetoPremiere-${{ needs.check-version.outputs.version }}.dmg
          retention-days: 90

  build-zxp:
    needs: [check-version, build-executables, build-ffmpeg]
    runs-on: windows-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
      
      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile
          yarn global add cross-env
      
      - name: Add global yarn bin to PATH
        run: echo "$(yarn global bin)" >> $GITHUB_PATH
        shell: bash
      
      - name: Download Executables
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare files for ZXP
        run: |
          mkdir -p dist/cep/exec/sounds
          
          # Copy Windows executable
          cp artifacts/executable-windows-latest/YoutubetoPremiere.exe dist/cep/exec/
          
          # Copy macOS executable 
          cp artifacts/executable-macos-13/YoutubetoPremiere dist/cep/exec/
          
          # Copy FFmpeg executables
          cp artifacts/ffmpeg-windows-latest/ffmpeg.exe dist/cep/exec/
          cp artifacts/ffmpeg-macos-13/ffmpeg dist/cep/exec/
          
          # Copy Python files
          cp app/*.py dist/cep/exec/
          
          # Copy sounds if they exist
          if (Test-Path app/sounds) {
            cp -r app/sounds/* dist/cep/exec/sounds/
          }
          
          # Create fix-permissions.sh script
          $fixPermissionsScript = @'
          #!/bin/bash
          # Fix permissions for macOS executables
          SCRIPT_DIR="$(dirname "$0")"
          chmod +x "$SCRIPT_DIR/YoutubetoPremiere" 2>/dev/null || true
          chmod +x "$SCRIPT_DIR/ffmpeg" 2>/dev/null || true
          xattr -d com.apple.quarantine "$SCRIPT_DIR/YoutubetoPremiere" 2>/dev/null || true
          xattr -d com.apple.quarantine "$SCRIPT_DIR/ffmpeg" 2>/dev/null || true
          echo "Permissions fixed for macOS executables"
          '@
          
          Set-Content -Path dist/cep/exec/fix-permissions.sh -Value $fixPermissionsScript -NoNewline
          
          # Copy README to exec folder
          if (Test-Path app/exec/README.md) {
            cp app/exec/README.md dist/cep/exec/
          }
          
          # Display content of exec directory
          Write-Host "Content of exec directory:"
          Get-ChildItem dist/cep/exec | ForEach-Object { Write-Host "  $($_.Name) - $($_.Length) bytes" }
        shell: pwsh
      
      - name: Build TypeScript
        run: yarn tsc -p "tsconfig-build.json"
      
      - name: Create ZXP Package
        run: |
          # Set environment variables to skip Python build
          $env:SKIP_PYTHON_BUILD = "true"
          $env:NO_PYTHON = "true"
          $env:ZXP_PACKAGE = "true"
          
          # Run ZXP packaging
          yarn zxp
          
          # Check if ZXP was created
          $zxpOriginalPath = "dist/zxp/com.youtubetoPremiereV2.cep.zxp"
          $zxpVersionedPath = "dist/zxp/YoutubetoPremiere-v${{ needs.check-version.outputs.version }}.zxp"
          
          if (Test-Path $zxpOriginalPath) {
            Write-Host "ZXP package created: $zxpOriginalPath"
            Copy-Item -Path $zxpOriginalPath -Destination $zxpVersionedPath -Force
            Write-Host "Created versioned ZXP: $zxpVersionedPath"
          } else {
            Write-Error "Failed to create ZXP package"
            exit 1
          }
        shell: pwsh
      
      - name: Verify ZXP Contents
        run: |
          pwsh verify-zxp-contents.ps1 "dist/zxp/YoutubetoPremiere-v${{ needs.check-version.outputs.version }}.zxp"
        shell: pwsh
      
      - name: Upload ZXP Package
        uses: actions/upload-artifact@v4
        with:
          name: zxp-package
          path: dist/zxp/YoutubetoPremiere-v${{ needs.check-version.outputs.version }}.zxp
          retention-days: 90
      
      - name: Create Release
        if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/zxp/YoutubetoPremiere-v${{ needs.check-version.outputs.version }}.zxp
            artifacts/installer-windows/YoutubetoPremiere-${{ needs.check-version.outputs.version }}-Setup.exe
            artifacts/installer-macos/YoutubetoPremiere-${{ needs.check-version.outputs.version }}.dmg
          name: YoutubetoPremiere v${{ needs.check-version.outputs.version }}
          tag_name: v${{ needs.check-version.outputs.version }}
          generate_release_notes: true 