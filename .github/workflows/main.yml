name: ZXP Release

on:
  push:
    tags:
      - "*.*.*"

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            python-path: 'C:\hostedtoolcache\windows\Python\3.9.*\x64'
            node-path: 'C:\hostedtoolcache\windows\node\18.*\x64'
          - os: macos-latest
            python-path: '/Users/runner/hostedtoolcache/Python/3.9.*/x64'
            node-path: '/Users/runner/hostedtoolcache/node/18.*/x64'
    
    runs-on: ${{ matrix.os }}
    env:
      CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          echo "${{ matrix.node-path }}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Setup Node.js (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          echo "${{ matrix.node-path }}/bin" >> $GITHUB_PATH
          
      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          brew install sdl2 pkg-config
          
      - name: Setup Python (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          echo "${{ matrix.python-path }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          python -m pip install --upgrade pip
          python -m pip install wheel setuptools
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Setup Python (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          python3 -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install wheel setuptools
          pip install -r requirements.txt
          pip install pyinstaller
          
      - name: Install Node dependencies
        shell: bash
        run: yarn install --frozen-lockfile

      - name: Debug Certificate Data
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          if [ -z "$CERTIFICATE_BASE64" ]; then
            echo "Certificate data is empty"
            exit 1
          fi
          echo "Certificate data length: ${#CERTIFICATE_BASE64}"

      - name: Create Certificate
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          echo "$CERTIFICATE_BASE64" | base64 -d > certificate.p12
          if [ ! -f certificate.p12 ]; then
            echo "Failed to create certificate"
            exit 1
          fi
          ls -l certificate.p12
          
      - name: Setup Keychain (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security list-keychains -d user -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -l build.keychain
          security import certificate.p12 -k build.keychain -P "$KEYCHAIN_PASSWORD" -T /usr/bin/codesign -A
          security list-keychains -s build.keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

      - name: Build macOS Executable
        if: matrix.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          source venv/bin/activate
          # Create build directories with proper permissions
          mkdir -p build/work dist/cep/exec/sounds
          chmod -R 755 build dist
          # Run PyInstaller with clean build
          python -m PyInstaller YoutubetoPremiere.spec --clean --workpath build/work --distpath dist
          # Create app bundle structure
          mkdir -p "dist/YoutubetoPremiere.app/Contents/MacOS"
          mv dist/YoutubetoPremiere "dist/YoutubetoPremiere.app/Contents/MacOS/"
          # Create Info.plist
          cat > "dist/YoutubetoPremiere.app/Contents/Info.plist" << EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>YoutubetoPremiere</string>
              <key>CFBundleIdentifier</key>
              <string>com.mickaelducatez.youtubetopremiereV2</string>
              <key>CFBundleName</key>
              <string>YoutubetoPremiere</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleShortVersionString</key>
              <string>1.0.0</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.13</string>
          </dict>
          </plist>
          EOL
          # Sign the app bundle
          codesign --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime --timestamp --force --verbose=4 "dist/YoutubetoPremiere.app"
          # Copy app bundle and sounds
          cp -r "dist/YoutubetoPremiere.app" "./dist/cep/exec/"
          cp -r app/sounds/* ./dist/cep/exec/sounds/

      - name: Build Windows Executable
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          python -m PyInstaller YoutubetoPremiere.spec --clean --workpath build/work --distpath dist
          New-Item -ItemType Directory -Force -Path dist/cep/exec
          Copy-Item dist/YoutubetoPremiere.exe dist/cep/exec/YoutubetoPremiere.exe
          New-Item -ItemType Directory -Force -Path dist/cep/exec/sounds
          Copy-Item -Recurse -Force app/sounds/* dist/cep/exec/sounds/

      - name: Notarize macOS Executable
        if: matrix.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          if [ -z "$APPLE_ID" ] || [ -z "$APPLE_APP_SPECIFIC_PASSWORD" ] || [ -z "$APPLE_TEAM_ID" ]; then
            echo "Error: Required Apple credentials are missing"
            exit 1
          fi

          echo "Creating zip for notarization..."
          ditto -c -k --keepParent "./dist/YoutubetoPremiere.app" "./YoutubetoPremiere.zip"
          
          echo "Submitting for notarization..."
          xcrun notarytool submit ./YoutubetoPremiere.zip \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait \
            --progress || {
              echo "Notarization failed"
              exit 1
            }
          
          echo "Stapling notarization ticket..."
          xcrun stapler staple "./dist/YoutubetoPremiere.app" || {
            echo "Stapling failed"
            exit 1
          }
          
          echo "Verifying stapled app bundle..."
          xcrun stapler validate "./dist/YoutubetoPremiere.app" || {
            echo "Validation failed"
            exit 1
          }
          
          # Update the executable in cep/exec with the notarized version
          rm -rf "./dist/cep/exec/YoutubetoPremiere.app"
          cp -r "./dist/YoutubetoPremiere.app" "./dist/cep/exec/"

      - name: Create Artifact
        if: matrix.os == 'macos-latest'
        run: |
          tar -czf dist-${{ matrix.os }}.tar.gz dist/

      - name: Create Artifact (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Compress-Archive -Path dist/* -DestinationPath dist-${{ matrix.os }}.zip
          # Rename to .tar.gz to maintain compatibility with the rest of the workflow
          Move-Item -Force dist-${{ matrix.os }}.zip dist-${{ matrix.os }}.tar.gz

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.os }}
          path: dist-${{ matrix.os }}.tar.gz
          retention-days: 1

  package:
    needs: build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        run: |
          echo "C:\hostedtoolcache\windows\node\18.*\x64\bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Extract artifacts
        shell: pwsh
        run: |
          # Create temp directory for extraction
          New-Item -ItemType Directory -Force -Path temp
          
          # Extract each artifact
          foreach ($file in Get-ChildItem -Path artifacts/*/*.tar.gz) {
            $platform = $file.Directory.Name
            $extractPath = "temp/$platform"
            New-Item -ItemType Directory -Force -Path $extractPath
            
            # Extract the tar.gz file
            tar -xzf $file.FullName -C $extractPath
          }
          
          # Create final cep structure with required folders
          $folders = @(
            "dist/cep/CSXS",
            "dist/cep/exec",
            "dist/cep/js",
            "dist/cep/jsx",
            "dist/cep/main",
            "dist/cep/node_modules",
            "dist/cep/settings"
          )
          foreach ($folder in $folders) {
            New-Item -ItemType Directory -Force -Path $folder
          }
          
          # Copy project files to cep structure
          Copy-Item -Recurse -Force "CSXS/*" "dist/cep/CSXS/"
          Copy-Item -Recurse -Force "js/*" "dist/cep/js/"
          Copy-Item -Recurse -Force "jsx/*" "dist/cep/jsx/"
          Copy-Item -Recurse -Force "main/*" "dist/cep/main/"
          Copy-Item -Recurse -Force "node_modules/*" "dist/cep/node_modules/"
          Copy-Item -Recurse -Force "settings/*" "dist/cep/settings/"
          
          # Copy executables from each platform
          foreach ($platform in Get-ChildItem -Path temp) {
            $execPath = Join-Path $platform.FullName "dist" "cep" "exec"
            if (Test-Path $execPath) {
              Write-Host "Processing platform: $($platform.Name)"
              if ($platform.Name -eq "dist-macos-latest") {
                # For macOS, copy the executable from inside the .app bundle
                $macosExe = Join-Path $execPath "YoutubetoPremiere.app" "Contents" "MacOS" "YoutubetoPremiere"
                if (Test-Path $macosExe) {
                  Copy-Item -Force $macosExe "dist/cep/exec/YoutubetoPremiere"
                }
              } elseif ($platform.Name -eq "dist-windows-latest") {
                # For Windows, copy the .exe file
                $winExe = Join-Path $execPath "YoutubetoPremiere.exe"
                if (Test-Path $winExe) {
                  Copy-Item -Force $winExe "dist/cep/exec/"
                }
              }
            }
          }
          
          # Copy sounds to exec folder
          New-Item -ItemType Directory -Force -Path "dist/cep/exec/sounds"
          Copy-Item -Recurse -Force "app/sounds/*" "dist/cep/exec/sounds/"
          
          # Debug: List contents of final directory
          Write-Host "Contents of dist/cep:"
          Get-ChildItem -Recurse dist/cep | ForEach-Object { Write-Host $_.FullName }

      - name: Download ZXPSignCmd
        shell: pwsh
        run: |
          # Create tools directory
          New-Item -ItemType Directory -Force -Path tools
          
          # Download ZXPSignCmd
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/Adobe-CEP/CEP-Resources/master/ZXPSignCMD/4.1.1/win64/ZXPSignCmd.exe" -OutFile "tools/ZXPSignCmd.exe"

      - name: Create Certificate
        shell: pwsh
        run: |
          # Create certificate directory
          New-Item -ItemType Directory -Force -Path cert
          
          # Generate self-signed certificate
          & tools/ZXPSignCmd.exe -selfSignedCert "FR" "IDF" "Mickael Ducatez" "YoutubetoPremiere" "1234" cert/certificate.p12

      - name: Package ZXP
        shell: pwsh
        run: |
          # Create dist/zxp directory
          New-Item -ItemType Directory -Force -Path dist/zxp
          
          # Package the extension
          & tools/ZXPSignCmd.exe -sign dist/cep dist/zxp/com.YoutubetoPremiereV2.cep.zxp cert/certificate.p12 1234

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ./dist/zxp/com.YoutubetoPremiereV2.cep.zxp
          generate_release_notes: true

      - name: Build macOS executable
        if: runner.os == 'macOS'
        run: |
          source venv/bin/activate
          pyinstaller YoutubetoPremiere.spec -y
