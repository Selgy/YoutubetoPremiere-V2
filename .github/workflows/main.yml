name: Build and Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      package_only:
        description: 'Only run the packaging step (uses latest successful build artifacts)'
        type: boolean
        default: false
      version:
        description: 'Version to use for the release (e.g. 3.0.5)'
        required: false
        default: ''

permissions:
  contents: write
  actions: read

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      app_changed: ${{ steps.filter.outputs.app_changed }}
      tag_version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check if package_only is enabled
        id: check_package_only
        run: |
          if [[ "${{ github.event.inputs.package_only }}" == "true" ]]; then
            echo "package_only=true" >> $GITHUB_OUTPUT
            if [[ -n "${{ github.event.inputs.version }}" ]]; then
              echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            else
              # Default to the latest tag if no version is specified
              latest_tag=$(git describe --tags --abbrev=0)
              echo "version=${latest_tag#v}" >> $GITHUB_OUTPUT
            fi
          else
            echo "package_only=false" >> $GITHUB_OUTPUT
          fi
        shell: bash
      
      - name: Check for app changes
        id: filter
        run: |
          if [[ "${{ steps.check_package_only.outputs.package_only }}" == "true" ]]; then
            echo "Skipping change detection as package_only is enabled"
            echo "app_changed=true" >> $GITHUB_OUTPUT
          else
            # Normal change detection
            if [[ "${{ github.event_name }}" == "push" && "${{ startsWith(github.ref, 'refs/tags/v') }}" == "true" ]]; then
              echo "app_changed=true" >> $GITHUB_OUTPUT
            else
              echo "No app changes detected or not a tagged push event"
              echo "app_changed=false" >> $GITHUB_OUTPUT
            fi
          fi
        shell: bash

      - name: Extract version from tag or input
        id: get_version
        run: |
          if [[ "${{ steps.check_package_only.outputs.package_only }}" == "true" ]]; then
            echo "version=${{ steps.check_package_only.outputs.version }}" >> $GITHUB_OUTPUT
          else
            if [[ "${{ github.event_name }}" == "push" && "${{ startsWith(github.ref, 'refs/tags/v') }}" == "true" ]]; then
              version=${GITHUB_REF#refs/tags/v}
              echo "version=$version" >> $GITHUB_OUTPUT
            else
              echo "version=0.0.0" >> $GITHUB_OUTPUT
            fi
          fi
        shell: bash

  build-ffmpeg:
    needs: check-changes
    if: ${{ needs.check-changes.outputs.app_changed == 'true' && github.event.inputs.package_only != 'true' }}
    strategy:
      matrix:
        os: [windows-latest, macos-13]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    outputs:
      windows_ffmpeg_path: ${{ steps.output_paths.outputs.win_ffmpeg_path }}
      macos_ffmpeg_path: ${{ steps.output_paths.outputs.mac_ffmpeg_path }}
    steps:
      - name: Check FFmpeg cache
        id: check_artifacts
        run: |
          # First check if artifacts exist from previous successful runs
          ARTIFACT_EXISTS=false

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ARTIFACT_NAME="ffmpeg-windows-latest"
          else
            ARTIFACT_NAME="ffmpeg-macos-13"
          fi

          echo "Checking for artifact: $ARTIFACT_NAME"
          
          # Try to download the artifact using GitHub API
          ARTIFACTS_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?name=$ARTIFACT_NAME")
          
          # Check if artifacts exist and are not expired
          ARTIFACT_COUNT=$(echo $ARTIFACTS_RESPONSE | jq '.total_count')
          
          if [[ "$ARTIFACT_COUNT" -gt 0 ]]; then
            echo "Found $ARTIFACT_COUNT existing artifact(s)"
            ARTIFACT_EXISTS=true
          else
            echo "No existing artifacts found"
          fi
          
          echo "artifact_exists=$ARTIFACT_EXISTS" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Download existing artifact
        if: steps.check_artifacts.outputs.artifact_exists == 'true'
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: main.yml
          workflow_conclusion: success
          name: ${{ matrix.os == 'windows-latest' && 'ffmpeg-windows-latest' || 'ffmpeg-macos-13' }}
          path: existing-artifact
      
      - name: Verify downloaded artifact
        if: steps.check_artifacts.outputs.artifact_exists == 'true'
        id: verify_artifact
        run: |
          ARTIFACT_VALID=false
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            if [ -f "existing-artifact/ffmpeg.exe" ]; then
              echo "Found valid Windows FFmpeg in artifact"
              ARTIFACT_VALID=true
            fi
          else
            if [ -f "existing-artifact/ffmpeg" ]; then
              echo "Found valid macOS FFmpeg in artifact"
              ARTIFACT_VALID=true
            fi
          fi
          
          echo "artifact_valid=$ARTIFACT_VALID" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Output paths
        id: output_paths
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            echo "win_ffmpeg_path=ffmpeg.exe" >> $GITHUB_OUTPUT
          else
            echo "mac_ffmpeg_path=ffmpeg" >> $GITHUB_OUTPUT
          fi
        shell: bash
      
      # Only run the rest of the steps if artifacts don't exist or are invalid
      - name: Checkout repository
        if: steps.check_artifacts.outputs.artifact_exists != 'true' || steps.verify_artifact.outputs.artifact_valid != 'true'
        uses: actions/checkout@v4
      
      - name: Install FFmpeg through package manager
        if: steps.check_artifacts.outputs.artifact_exists != 'true' || steps.verify_artifact.outputs.artifact_valid != 'true'
        id: package_install
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            choco install ffmpeg -y
            cp "C:/ProgramData/chocolatey/bin/ffmpeg.exe" ./ffmpeg.exe
          else
            brew install ffmpeg
            cp "$(which ffmpeg)" ./ffmpeg
          fi
          echo "FFmpeg installed successfully"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ls -la ./ffmpeg.exe || echo "Windows FFmpeg not found"
          else
            ls -la ./ffmpeg || echo "macOS FFmpeg not found"
          fi
        shell: bash
      
      - name: Upload FFmpeg
        if: steps.check_artifacts.outputs.artifact_exists != 'true' || steps.verify_artifact.outputs.artifact_valid != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.os }}
          path: ${{ matrix.os == 'windows-latest' && 'ffmpeg.exe' || 'ffmpeg' }}
          retention-days: 90
      
      # Use existing artifact if it exists and is valid
      - name: Prepare existing artifact for upload
        if: steps.check_artifacts.outputs.artifact_exists == 'true' && steps.verify_artifact.outputs.artifact_valid == 'true'
        run: |
          mkdir -p .
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp existing-artifact/ffmpeg.exe ./
            echo "Reusing existing Windows FFmpeg"
          else
            cp existing-artifact/ffmpeg ./
            echo "Reusing existing macOS FFmpeg"
          fi
          echo "Content of current directory:"
          ls -la .
        shell: bash
      
      - name: Re-upload existing artifact
        if: steps.check_artifacts.outputs.artifact_exists == 'true' && steps.verify_artifact.outputs.artifact_valid == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-${{ matrix.os }}
          path: ${{ matrix.os == 'windows-latest' && 'ffmpeg.exe' || 'ffmpeg' }}
          retention-days: 90

  build-executables:
    needs: check-changes
    if: ${{ needs.check-changes.outputs.app_changed == 'true' && github.event.inputs.package_only != 'true' }}
    strategy:
      matrix:
        os: [windows-latest, macos-13]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Check for existing artifacts
        id: check_artifacts
        run: |
          # First check if artifacts exist from previous successful runs
          ARTIFACT_EXISTS=false

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ARTIFACT_NAME="executable-windows-latest"
          else
            ARTIFACT_NAME="executable-macos-13"
          fi

          echo "Checking for artifact: $ARTIFACT_NAME"
          
          # For macOS, always rebuild to apply signature
          if [[ "${{ matrix.os }}" == "macos-13" ]]; then
            echo "Forces rebuilding macOS executable to apply proper signing"
            echo "artifact_exists=false" >> $GITHUB_OUTPUT
          else
            # Try to download the artifact using GitHub API
            ARTIFACTS_RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?name=$ARTIFACT_NAME")
            
            # Check if artifacts exist and are not expired
            ARTIFACT_COUNT=$(echo $ARTIFACTS_RESPONSE | jq '.total_count')
            
            if [[ "$ARTIFACT_COUNT" -gt 0 ]]; then
              echo "Found $ARTIFACT_COUNT existing artifact(s)"
              ARTIFACT_EXISTS=true
            else
              echo "No existing artifacts found"
            fi
            
            echo "artifact_exists=$ARTIFACT_EXISTS" >> $GITHUB_OUTPUT
          fi
        shell: bash
      
      - name: Download existing artifact
        if: steps.check_artifacts.outputs.artifact_exists == 'true'
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: main.yml
          workflow_conclusion: success
          name: ${{ matrix.os == 'windows-latest' && 'executable-windows-latest' || 'executable-macos-13' }}
          path: existing-artifact

      - name: Verify downloaded artifact
        if: steps.check_artifacts.outputs.artifact_exists == 'true'
        id: verify_artifact
        run: |
          ARTIFACT_VALID=false
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            if [ -f "existing-artifact/YoutubetoPremiere.exe" ]; then
              echo "Found valid Windows executable in artifact"
              ARTIFACT_VALID=true
            fi
          else
            if [ -f "existing-artifact/YoutubetoPremiere" ]; then
              echo "Found valid macOS executable in artifact"
              ARTIFACT_VALID=true
            fi
          fi
          
          echo "artifact_valid=$ARTIFACT_VALID" >> $GITHUB_OUTPUT
        shell: bash
      
      # Only run the rest of the steps if artifacts don't exist or are invalid
      - name: Setup Python
        if: steps.check_artifacts.outputs.artifact_exists != 'true' || steps.verify_artifact.outputs.artifact_valid != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install Python dependencies
        if: steps.check_artifacts.outputs.artifact_exists != 'true' || steps.verify_artifact.outputs.artifact_valid != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller python-socketio requests pillow
      
      - name: Check Platform
        if: steps.check_artifacts.outputs.artifact_exists != 'true' || steps.verify_artifact.outputs.artifact_valid != 'true'
        id: platform
        run: |
          echo "Building for ${{ matrix.os }}"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "is_windows=true" >> $GITHUB_OUTPUT
          else
            echo "is_windows=false" >> $GITHUB_OUTPUT
            
            # Check if Apple signing certificates are available
            if [[ -z "${{ secrets.SIGNING_CERTIFICATE }}" || -z "${{ secrets.APPLE_ID }}" || -z "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" || -z "${{ secrets.APPLE_TEAM_ID }}" ]]; then
              echo "::warning::Missing Apple signing credentials! The macOS executable will not be properly signed and may be blocked by Gatekeeper on macOS."
              echo "::warning::Please configure SIGNING_CERTIFICATE, APPLE_ID, APPLE_APP_SPECIFIC_PASSWORD, and APPLE_TEAM_ID secrets."
              echo "::warning::Users on macOS will need to manually bypass Gatekeeper to run the application."
              echo "has_signing_creds=false" >> $GITHUB_OUTPUT
            else
              echo "has_signing_creds=true" >> $GITHUB_OUTPUT
              echo "Apple signing credentials detected - the macOS executable will be properly signed."
            fi
          fi
        shell: bash
      
      - name: Clean Python caches on Windows
        if: ${{ steps.platform.outputs.is_windows == 'true' && (steps.check_artifacts.outputs.artifact_exists != 'true' || steps.verify_artifact.outputs.artifact_valid != 'true') }}
        run: |
          Remove-Item -Path $env:LOCALAPPDATA\pip\Cache -Recurse -Force -ErrorAction SilentlyContinue
          Write-Host "Cleared pip cache"
        shell: pwsh

      - name: Build executable with PyInstaller
        if: steps.check_artifacts.outputs.artifact_exists != 'true' || steps.verify_artifact.outputs.artifact_valid != 'true'
        run: |
          echo "Working directory: $(pwd)"
          echo "Content of app directory:"
          ls -la app/
          
          # Create the spec file based on the platform
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows spec
            python -m PyInstaller --name YoutubetoPremiere --onefile app/YoutubetoPremiere.py
          else
            # macOS spec
            python -m PyInstaller --name YoutubetoPremiere --onefile app/YoutubetoPremiere.py
          fi
          
          echo "PyInstaller completed"
          echo "Content of dist directory:"
          ls -la dist/
        shell: bash
        
      # Add macOS codesigning steps
      - name: Install create-dmg on macOS
        if: matrix.os == 'macos-13' && (steps.check_artifacts.outputs.artifact_exists != 'true' || steps.verify_artifact.outputs.artifact_valid != 'true')
        run: brew install create-dmg
        shell: bash
        
      - name: Import Apple Developer Certificate on macOS
        if: matrix.os == 'macos-13' && (steps.check_artifacts.outputs.artifact_exists != 'true' || steps.verify_artifact.outputs.artifact_valid != 'true')
        env:
          CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          KEYCHAIN_PASSWORD: keychainpwd
        run: |
          # Check if certificate is provided
          if [[ -z "$CERTIFICATE_BASE64" ]]; then
            echo "::warning::No certificate provided. Skipping code signing."
            exit 0
          fi
          
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate and key
          echo -n "$CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          
          # Create a temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import the certificate
          security import $CERTIFICATE_PATH -P "$CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Allow codesign to access the key
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        shell: bash
        
      - name: Code Sign macOS executable
        if: matrix.os == 'macos-13' && (steps.check_artifacts.outputs.artifact_exists != 'true' || steps.verify_artifact.outputs.artifact_valid != 'true')
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Check if certificate is provided
          if [[ -z "${{ secrets.SIGNING_CERTIFICATE }}" ]]; then
            echo "::warning::No certificate provided. Skipping code signing."
            exit 0
          fi
          
          # Add entitlements.plist
          cat > entitlements.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.allow-dyld-environment-variables</key>
              <true/>
              <key>com.apple.security.network.client</key>
              <true/>
              <key>com.apple.security.files.user-selected.read-write</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # Extract the available signing identities
          echo "Available signing identities:"
          security find-identity -v -p codesigning
          
          # Find the Developer ID Application identity
          SIGNATURE_ID=$(security find-identity -v -p codesigning | grep "Developer ID Application" | head -1 | awk -F '"' '{print $2}')
          echo "Found signing identity: $SIGNATURE_ID"
          
          if [[ -z "$SIGNATURE_ID" ]]; then
            echo "::warning::No Developer ID Application identity found. Using placeholder."
            SIGNATURE_ID="-"
          fi
          
          # Ensure executable permissions
          chmod +x "dist/YoutubetoPremiere"
          
          # Sign the executable with the found identity
          echo "Signing with identity: $SIGNATURE_ID"
          codesign --force --options runtime --entitlements entitlements.plist --sign "$SIGNATURE_ID" "dist/YoutubetoPremiere"
          
          # Verify signature
          codesign -vvv --deep --strict "dist/YoutubetoPremiere" || echo "Code signing verification failed but continuing"
        shell: bash
        
      - name: Notarize macOS executable
        if: matrix.os == 'macos-13' && (steps.check_artifacts.outputs.artifact_exists != 'true' || steps.verify_artifact.outputs.artifact_valid != 'true')
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Check if credentials are provided
          if [[ -z "$APPLE_ID" || -z "$APPLE_APP_PASSWORD" ]]; then
            echo "::warning::Apple ID or App Password not provided. Skipping notarization."
            exit 0
          fi
          
          # Save original executable for backup
          cp "dist/YoutubetoPremiere" "dist/YoutubetoPremiere.original"
          
          # For non-app bundles, we need to create a ZIP for submission
          echo "Creating zip of the executable for notarization..."
          cd dist
          zip -y YoutubetoPremiere.zip YoutubetoPremiere
          cd ..
          
          # Submit for notarization
          echo "Submitting for notarization..."
          xcrun notarytool submit dist/YoutubetoPremiere.zip \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait || echo "Notarization submission failed but continuing"
          
          # Extract notarized binary and verify
          echo "Extracting notarized binary..."
          cd dist
          mkdir -p notarized
          unzip -o YoutubetoPremiere.zip -d notarized
          
          if [ -f "notarized/YoutubetoPremiere" ]; then
            # Give it execute permissions
            chmod +x notarized/YoutubetoPremiere
            
            # Staple the notarization ticket directly to the binary
            echo "Stapling notarization ticket to binary..."
            xcrun stapler staple notarized/YoutubetoPremiere || echo "Stapling failed, but continuing"
            
            # Check stapled ticket
            echo "Checking for notarization ticket..."
            xcrun stapler validate notarized/YoutubetoPremiere || echo "Stapling check failed, but continuing"
            
            # Copy notarized version back to dist folder
            cp notarized/YoutubetoPremiere YoutubetoPremiere
            echo "Replaced executable with notarized version"
          else
            echo "Could not extract notarized executable, using original"
            cp YoutubetoPremiere.original YoutubetoPremiere
          fi
          
          echo "Executable is signed and ready for distribution"
          ls -la YoutubetoPremiere
          file YoutubetoPremiere
          
          # Create a special archive with the notarized executable for distribution
          echo "Creating a special archive with notarized executable..."
          mkdir -p finalized
          cp YoutubetoPremiere finalized/
          cd finalized
          
          # Set the file attributes explicitly to make it recognize as an application
          echo "Setting file type flags to make sure it's recognized as an application..."
          if command -v SetFile >/dev/null 2>&1; then
            SetFile -t APPL YoutubetoPremiere
            echo "Set file type with SetFile"
          fi
          
          # Package with ditto to preserve all attributes and metadata
          if command -v ditto >/dev/null 2>&1; then
            mkdir -p app_package
            ditto -c -k --keepParent YoutubetoPremiere app_package/YoutubetoPremiere.zip
            mv app_package/YoutubetoPremiere.zip ../YoutubetoPremiere-notarized.zip
            echo "Created archive with ditto to preserve all attributes"
          else
            # Fallback to tar which preserves executable permissions
            tar -czf YoutubetoPremiere-notarized.tar.gz YoutubetoPremiere
            cp YoutubetoPremiere-notarized.tar.gz ../
            echo "Created fallback archive with tar"
          fi
          
          cd ..
          
          # Cleanup
          rm -rf finalized
          cd ..
        shell: bash

      - name: Upload executable artifact
        if: steps.check_artifacts.outputs.artifact_exists != 'true' || steps.verify_artifact.outputs.artifact_valid != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: |
            dist/YoutubetoPremiere*
            dist/*.zip
          retention-days: 90
      
      # Use existing artifact if it exists and is valid
      - name: Prepare existing artifact for upload
        if: steps.check_artifacts.outputs.artifact_exists == 'true' && steps.verify_artifact.outputs.artifact_valid == 'true'
        run: |
          mkdir -p dist
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp existing-artifact/YoutubetoPremiere.exe dist/
            echo "Reusing existing Windows executable"
          else
            cp existing-artifact/YoutubetoPremiere dist/
            echo "Reusing existing macOS executable"
          fi
          echo "Content of dist directory:"
          ls -la dist/
        shell: bash

      - name: Re-upload existing artifact
        if: steps.check_artifacts.outputs.artifact_exists == 'true' && steps.verify_artifact.outputs.artifact_valid == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: dist/YoutubetoPremiere*
          retention-days: 90

  package-zxp:
    needs: [check-changes, build-ffmpeg, build-executables]
    if: ${{ needs.check-changes.outputs.app_changed == 'true' }}
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile
          yarn global add cross-env

      - name: Add global yarn bin to PATH
        run: echo "$(yarn global bin)" >> $GITHUB_PATH
        shell: bash

      - name: Create directories
        run: |
          mkdir -p dist/cep/exec/sounds
          mkdir -p backup/exec
        shell: bash

      - name: Download artifacts from current workflow
        if: ${{ github.event.inputs.package_only != 'true' }}
        uses: actions/download-artifact@v4
        
      - name: Download artifacts from previous workflow
        if: ${{ github.event.inputs.package_only == 'true' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: main.yml
          workflow_conclusion: success
          name_is_regexp: true
          name: .*
          path: artifacts
      
      - name: List downloaded artifacts
        run: |
          if [[ "${{ github.event.inputs.package_only }}" == "true" ]]; then
            find artifacts -type f | sort
          else
            ls -la
          fi
        shell: bash

      - name: Create directories for CSX structure
        if: matrix.os == 'macos-13' && (steps.check_artifacts.outputs.artifact_exists != 'true' || steps.verify_artifact.outputs.artifact_valid != 'true')
        run: |
          mkdir -p dist/cep/js
          mkdir -p dist/cep/jsx
          mkdir -p dist/cep/assets
          mkdir -p dist/cep/CSXS
          mkdir -p dist/cep/exec
          mkdir -p dist/cep/main
          mkdir -p dist/cep/settings
        shell: bash

      - name: Create unblock.sh script for macOS users
        if: matrix.os == 'macos-13' && (steps.check_artifacts.outputs.artifact_exists != 'true' || steps.verify_artifact.outputs.artifact_valid != 'true')
        run: |
          # This step is no longer needed as we're using a properly notarized executable
          echo "Skipping creation of unblock.sh - using notarized executable instead"
        shell: bash

      - name: Optimize ZXP packaging process
        shell: bash
        env:
          SKIP_PYTHON_BUILD: true
          NO_PYTHON: true
          ZXP_PACKAGE: true
          SKIP_FILE_COPY: true
        run: |
          # Function to copy artifacts with error checking
          copy_artifact() {
            local source=$1
            local dest=$2
            local description=$3
            
            if [ -f "$source" ]; then
              # Use cp -p to preserve permissions
              cp -p "$source" "$dest"
              
              # For macOS executables, ensure they have execute permissions
              if [[ "$source" == *"macos"* ]] || [[ "$source" != *".exe" ]]; then
                chmod +x "$dest/$(basename "$source")"
                # Verify the permissions were set
                if [ -x "$dest/$(basename "$source")" ]; then
                  echo "✓ Set execute permissions for $description"
                else
                  echo "✗ WARNING: Failed to set execute permissions for $description"
                fi
              fi
              
              echo "✓ Copied $description"
              
              # Verify the file exists and has the correct size
              if [ -f "$dest/$(basename "$source")" ]; then
                local source_size=$(stat -f%z "$source" 2>/dev/null || stat -c%s "$source")
                local dest_size=$(stat -f%z "$dest/$(basename "$source")" 2>/dev/null || stat -c%s "$dest/$(basename "$source")")
                if [ "$source_size" = "$dest_size" ]; then
                  echo "✓ Verified $description (size: $source_size bytes)"
                else
                  echo "✗ WARNING: Size mismatch for $description"
                  echo "  Source: $source_size bytes"
                  echo "  Destination: $dest_size bytes"
                fi
              else
                echo "✗ ERROR: Failed to copy $description"
                return 1
              fi
            else
              echo "✗ ERROR: $description not found at: $source"
              return 1
            fi
          }
          
          echo "===== PREPARING ZXP PACKAGE ====="
          
          # Create backup of executables
          mkdir -p backup/exec
          mkdir -p dist
          
          # Copy all Python files with preserved permissions
          echo "Copying Python files..."
          cp -p app/*.py dist/cep/exec/ 2>/dev/null || echo "No Python files found"
          cp -rp app/sounds/* dist/cep/exec/sounds/ 2>/dev/null || echo "No sound files found"
          
          # Copy scripts and resources
          echo "Copying helper scripts..."
          
          # Copy artifacts efficiently
          echo "Copying executables and FFmpeg..."
          
          # Windows executable
          copy_artifact "executable-windows-latest/YoutubetoPremiere.exe" "dist/cep/exec/" "Windows executable to CEP"
          copy_artifact "executable-windows-latest/YoutubetoPremiere.exe" "backup/exec/" "Windows executable to backup"
          copy_artifact "executable-windows-latest/YoutubetoPremiere.exe" "dist/" "Windows executable to dist"
          
          # Windows FFmpeg
          copy_artifact "ffmpeg-windows-latest/ffmpeg.exe" "dist/cep/exec/" "Windows FFmpeg to CEP"
          copy_artifact "ffmpeg-windows-latest/ffmpeg.exe" "backup/exec/" "Windows FFmpeg to backup"
          copy_artifact "ffmpeg-windows-latest/ffmpeg.exe" "dist/" "Windows FFmpeg to dist"
          
          # macOS executable
          copy_artifact "executable-macos-13/YoutubetoPremiere" "dist/cep/exec/" "macOS executable to CEP"
          copy_artifact "executable-macos-13/YoutubetoPremiere" "backup/exec/" "macOS executable to backup"
          copy_artifact "executable-macos-13/YoutubetoPremiere" "dist/" "macOS executable to dist"
          
          # macOS FFmpeg
          copy_artifact "ffmpeg-macos-13/ffmpeg" "dist/cep/exec/" "macOS FFmpeg to CEP"
          copy_artifact "ffmpeg-macos-13/ffmpeg" "backup/exec/" "macOS FFmpeg to backup"
          copy_artifact "ffmpeg-macos-13/ffmpeg" "dist/" "macOS FFmpeg to dist"
          
          # Verify files in place and permissions
          echo "Verifying files in dist/cep/exec before yarn zxp:"
          ls -la dist/cep/exec
          
          echo "Verifying files in dist directory:"
          ls -la dist
          
          # Build TypeScript
          echo "Building TypeScript..."
          yarn tsc -p "tsconfig-build.json"
          
          # Create initial ZXP
          echo "Running initial yarn zxp..."
          yarn zxp
          
          # Verify the ZXP exists
          if [ ! -f "dist/zxp/com.youtubetoPremiereV2.cep.zxp" ]; then
            echo "ERROR: yarn zxp did not create the ZXP package"
            exit 1
          fi
          
          echo "Extracting the ZXP package..."
          mkdir -p zxp_extract
          cp dist/zxp/com.youtubetoPremiereV2.cep.zxp zxp_extract/
          cd zxp_extract
          unzip -q com.youtubetoPremiereV2.cep.zxp -d contents || echo "Could not extract ZXP"
          cd ..
          
          echo "Creating exec directory in the extracted package..."
          mkdir -p zxp_extract/contents/exec
          
          echo "Copying executables to the extracted package..."
          cp -p backup/exec/* zxp_extract/contents/exec/ 2>/dev/null || echo "No executables found in backup"
          cp -p app/*.py zxp_extract/contents/exec/ 2>/dev/null || echo "No Python files found"
          mkdir -p zxp_extract/contents/exec/sounds
          cp -rp app/sounds/* zxp_extract/contents/exec/sounds/ 2>/dev/null || echo "No sound files found"
          
          # Ensure proper permissions for macOS executables
          chmod +x zxp_extract/contents/exec/YoutubetoPremiere 2>/dev/null || true
          chmod +x zxp_extract/contents/exec/ffmpeg 2>/dev/null || true
          
          echo "Verifying executables are in the extracted package:"
          ls -la zxp_extract/contents/exec
          
          echo "===== ZXP PACKAGING COMPLETED ====="

      - name: Create Directory for Scripts
        run: mkdir -p .github/scripts
        shell: bash

      - name: Create PowerShell Script for ZXP Creation
        run: |
          cat << 'EOF' > .github/scripts/create-zxp.ps1
          Write-Host "===== CREATING FINAL ZXP WITH EXECUTABLES ====="
          
          # Get paths
          $workspacePath = Get-Location
          $winExeSource = Join-Path $workspacePath "executable-windows-latest/YoutubetoPremiere.exe"
          $macExeSource = Join-Path $workspacePath "executable-macos-13/YoutubetoPremiere"
          $winFfmpegSource = Join-Path $workspacePath "ffmpeg-windows-latest/ffmpeg.exe"
          $macFfmpegSource = Join-Path $workspacePath "ffmpeg-macos-13/ffmpeg"
          $tempNotarizedDir = Join-Path $workspacePath "temp_notarized"
          
          Write-Host "Windows FFmpeg source: $winFfmpegSource"
          Write-Host "macOS FFmpeg source: $macFfmpegSource" 
          
          # Create directory structure
          $outputDir = Join-Path $workspacePath "zxp_output"
          if (Test-Path $outputDir) {
            Remove-Item -Path $outputDir -Recurse -Force
          }
          New-Item -ItemType Directory -Path $outputDir -Force | Out-Null
          Write-Host "Created output directory: $outputDir"
          
          # Create subdirectories
          $execDir = Join-Path $outputDir "exec"
          New-Item -ItemType Directory -Path $execDir -Force | Out-Null
          Write-Host "Created exec directory: $execDir"
          New-Item -ItemType Directory -Path (Join-Path $outputDir "js") -Force | Out-Null
          New-Item -ItemType Directory -Path (Join-Path $outputDir "jsx") -Force | Out-Null
          New-Item -ItemType Directory -Path (Join-Path $outputDir "assets") -Force | Out-Null
          New-Item -ItemType Directory -Path (Join-Path $outputDir "CSXS") -Force | Out-Null
          New-Item -ItemType Directory -Path (Join-Path $outputDir "main") -Force | Out-Null
          New-Item -ItemType Directory -Path (Join-Path $outputDir "settings") -Force | Out-Null
          New-Item -ItemType Directory -Path (Join-Path $execDir "sounds") -Force | Out-Null
          
          # Copy files from dist/cep if they exist, otherwise create minimal structure
          if (Test-Path "dist/cep") {
            Copy-Item -Path "dist/cep/*" -Destination $outputDir -Force -Recurse
            Write-Host "Copied files from dist/cep to $outputDir"
          }
          
          # Copy Python files
          if (Test-Path "app") {
            Copy-Item -Path "app/*.py" -Destination $execDir -Force
            Write-Host "Copied Python files to $execDir"
          }
          
          # Copy executables (Windows and the rest)
          Write-Host "Copying executables..."
          if (Test-Path $winExeSource) {
            Copy-Item -Path $winExeSource -Destination "$execDir/YoutubetoPremiere.exe" -Force
            Write-Host "Copied Windows executable"
          } else {
            Write-Host "WARNING: Windows executable not found at $winExeSource"
          }
          
          # Check for notarized ZIP first (highest priority)
          $notarizedZipPath = Join-Path $workspacePath "executable-macos-13/YoutubetoPremiere-notarized.zip"
          if (Test-Path $notarizedZipPath) {
            Write-Host "Found ditto-prepared macOS executable ZIP. Extracting it..."
            New-Item -ItemType Directory -Path $tempNotarizedDir -Force | Out-Null
            
            # Use unzip to preserve all attributes from ditto
            & "bash" "-c" "unzip -o \"$notarizedZipPath\" -d \"$execDir\" || echo 'unzip failed'"
            
            # Verify the file is correctly extracted
            if (Test-Path "$execDir/YoutubetoPremiere") {
              Write-Host "✅ Notarized macOS executable from ditto archive successfully extracted"
              & "bash" "-c" "ls -la \"$execDir/YoutubetoPremiere\" || echo 'ls command failed'"
            } else {
              Write-Host "❌ Failed to extract from ditto archive - falling back to other methods"
            }
          }
          
          # If notarized ZIP not found or extraction failed, check regular ZIP
          if (-not (Test-Path "$execDir/YoutubetoPremiere") -and (Test-Path $notarizedZipPath)) {
            Write-Host "Using standard notarized macOS executable ZIP..."
            New-Item -ItemType Directory -Path $tempNotarizedDir -Force | Out-Null
            Expand-Archive -Path $notarizedZipPath -DestinationPath $tempNotarizedDir -Force
            
            if (Test-Path "$tempNotarizedDir/YoutubetoPremiere") {
              Write-Host "Using notarized macOS executable from ZIP"
              Copy-Item -Path "$tempNotarizedDir/YoutubetoPremiere" -Destination "$execDir/YoutubetoPremiere" -Force
            }
          }
          
          # Only copy macOS executable if we didn't extract it from the notarized ZIP
          if (-not (Test-Path "$execDir/YoutubetoPremiere") -and (Test-Path $macExeSource)) {
            Copy-Item -Path $macExeSource -Destination "$execDir/YoutubetoPremiere" -Force
            Write-Host "Copied macOS executable (fallback)"
          }
          
          if (Test-Path $winFfmpegSource) {
            Copy-Item -Path $winFfmpegSource -Destination "$execDir/ffmpeg.exe" -Force
            Write-Host "Copied Windows FFmpeg"
          } else {
            Write-Host "WARNING: Windows FFmpeg not found at $winFfmpegSource"
          }
          
          if (Test-Path $macFfmpegSource) {
            Copy-Item -Path $macFfmpegSource -Destination "$execDir/ffmpeg" -Force
            Write-Host "Copied macOS FFmpeg"
          } else {
            Write-Host "WARNING: macOS FFmpeg not found at $macFfmpegSource"
          }
          
          # Set permissions for macOS files - CRITICAL for preventing the "not open" error
          Write-Host "Setting executable permissions for macOS files..."
          & "bash" "-c" "chmod +x \"$execDir/YoutubetoPremiere\" 2>/dev/null || true"
          & "bash" "-c" "chmod +x \"$execDir/ffmpeg\" 2>/dev/null || true"
          
          # Verify permissions were set correctly
          & "bash" "-c" "ls -la \"$execDir\" | grep -E 'YoutubetoPremiere|ffmpeg|unblock'"
          
          # Test macOS executable signature if available
          if (Test-Path "$execDir/YoutubetoPremiere") {
            Write-Host "Testing macOS executable signature..."
            & "bash" "-c" "file \"$execDir/YoutubetoPremiere\" || echo 'File command failed'"
            
            # Check if xattr is available (to check quarantine attributes)
            $hasXattr = & "bash" "-c" "command -v xattr" 2>$null
            if ($hasXattr) {
              & "bash" "-c" "xattr -l \"$execDir/YoutubetoPremiere\" || echo 'No extended attributes'"
            }
          }
          
          # Create ZXP package
          Write-Host "Creating ZXP package..."
          New-Item -ItemType Directory -Path "dist/zxp" -Force | Out-Null
          $zxpPath = Join-Path $workspacePath "dist/zxp/com.youtubetoPremiereV2.cep.zxp"
          
          if (Test-Path $zxpPath) {
            Remove-Item -Path $zxpPath -Force
          }
          
          # Create a .zip file with platform-specific tools to preserve attributes
          if ($IsWindows -or $env:OS -like "*Windows*") {
            Write-Host "Running on Windows - using bash zip for ZXP creation"
            
            # Use bash zip with options to preserve attributes even on Windows
            & "bash" "-c" "cd \"$outputDir\" && zip -r -X -9 --symlinks \"$zxpPath\" * || echo 'Zip command failed'"
          } else {
            # On macOS runner, use ditto if available, otherwise zip
            Write-Host "Running on macOS - using ditto for ZXP creation if available"
            $tempZipPath = Join-Path $workspacePath "temp_zxp.zip"
            
            $dittoCmdExists = & "bash" "-c" "command -v ditto >/dev/null 2>&1 && echo 'true' || echo 'false'"
            if ($dittoCmdExists -eq "true") {
              & "bash" "-c" "ditto -c -k --keepParent \"$outputDir\" \"$tempZipPath\" && mv \"$tempZipPath\" \"$zxpPath\" || echo 'Ditto failed'"
              Write-Host "Created ZXP package using ditto (preserves all file attributes)"
            } else {
              & "bash" "-c" "cd \"$outputDir\" && zip -r -y -X \"$zxpPath\" * || echo 'Zip command failed'"
              Write-Host "Created ZXP package using zip with attributes preserved"
            }
          }
          
          Write-Host "Created ZXP package at: $zxpPath"
          
          # Verify ZXP contents
          $tempExtractDir = Join-Path $workspacePath "verify_zxp"
          if (Test-Path $tempExtractDir) {
            Remove-Item -Path $tempExtractDir -Recurse -Force
          }
          New-Item -ItemType Directory -Path $tempExtractDir -Force | Out-Null
          
          Write-Host "Verifying ZXP contents..."
          Copy-Item -Path $zxpPath -Destination "$tempExtractDir/package.zip" -Force
          Expand-Archive -Path "$tempExtractDir/package.zip" -DestinationPath "$tempExtractDir/contents" -Force
          
          if (Test-Path "$tempExtractDir/contents/exec/YoutubetoPremiere") {
            Write-Host "✅ macOS executable found in ZXP"
            # Show file details
            & "bash" "-c" "file \"$tempExtractDir/contents/exec/YoutubetoPremiere\" 2>/dev/null || echo 'File command not available'"
            & "bash" "-c" "ls -la \"$tempExtractDir/contents/exec/YoutubetoPremiere\" || echo 'ls command failed'"
            
            # Verify executable permission is preserved
            $isExecutable = & "bash" "-c" "test -x \"$tempExtractDir/contents/exec/YoutubetoPremiere\" && echo 'true' || echo 'false'"
            if ($isExecutable -eq "true") {
                Write-Host "✅ macOS executable permission is preserved"
            } else {
                Write-Host "❌ macOS executable permission is NOT preserved!"
            }
          } else {
            Write-Host "❌ ERROR: macOS executable not found in ZXP!"
          }
          
          if (Test-Path "$tempExtractDir/contents/exec/ffmpeg") {
            Write-Host "✅ macOS FFmpeg found in ZXP"
          } else {
            Write-Host "❌ ERROR: macOS FFmpeg not found in ZXP!"
          }
          
          # Check for unblock.sh - No longer needed as we now use notarized executables
          # Since we've removed unblock.sh, we don't need to verify its presence
          
          # Clean up
          Remove-Item -Path $outputDir -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item -Path $tempExtractDir -Recurse -Force -ErrorAction SilentlyContinue
          if (Test-Path $tempNotarizedDir) {
              Remove-Item -Path $tempNotarizedDir -Recurse -Force -ErrorAction SilentlyContinue
          }
          
          Write-Host "===== FINAL ZXP PACKAGING COMPLETED ====="
          EOF
        shell: bash

      - name: Create Final ZXP with Executables
        shell: pwsh
        run: |
          pwsh -ExecutionPolicy Bypass -File .github/scripts/create-zxp.ps1

      - name: Verify and Rename ZXP Package
        shell: pwsh
        run: |
          $version = "${{ needs.check-changes.outputs.tag_version }}"
          
          if (Test-Path "dist/zxp/com.youtubetoPremiereV2.cep.zxp") {
            # Rename the ZXP file to include the version
            $newName = "YoutubetoPremiere-v$version.zxp"
            Copy-Item -Path "dist/zxp/com.youtubetoPremiereV2.cep.zxp" -Destination "dist/zxp/$newName" -Force
            Write-Host "Renamed ZXP package to: $newName"
            
            # Remove the original file
            Remove-Item -Path "dist/zxp/com.youtubetoPremiereV2.cep.zxp" -Force
            
            # List the files
            Get-ChildItem -Path dist/zxp
          } else {
            Write-Error "ZXP package was not found!"
              exit 1
          }

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./dist/zxp/YoutubetoPremiere-v${{ needs.check-changes.outputs.tag_version }}.zxp
          name: YoutubetoPremiere v${{ needs.check-changes.outputs.tag_version }}
          tag_name: v${{ needs.check-changes.outputs.tag_version }}
          generate_release_notes: true
