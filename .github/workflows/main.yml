name: ZXP Release

on:
  push:
    tags:
      - "*.*.*"

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        node-version: [18.x]
        python-version: [3.9]
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          yarn install --frozen-lockfile
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
        
      - name: Create signing certificate
        if: matrix.os == 'macos-latest'
        env:
          CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
        run: |
          echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          
      - name: Setup Keychain (macOS)
        if: matrix.os == 'macos-latest'
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security import certificate.p12 -k build.keychain -P "$KEYCHAIN_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

      - name: Build Executables
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            python -m PyInstaller YoutubetoPremiere.spec --target-arch universal2 --workpath build --distpath build
            codesign --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime --timestamp --force --verbose=4 ./build/YoutubetoPremiere
          else
            python -m PyInstaller YoutubetoPremiere.spec --workpath build --distpath build
          fi
          mkdir -p dist/cep/exec
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            cp -r build/YoutubetoPremiere dist/cep/exec/YoutubetoPremiere
          else
            cp build/YoutubetoPremiere.exe dist/cep/exec/YoutubetoPremiere.exe
          fi
          mkdir -p dist/cep/exec/sounds
          cp -r app/sounds/* dist/cep/exec/sounds/

      - name: Notarize macOS Executable
        if: matrix.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          ditto -c -k --keepParent ./dist/cep/exec/YoutubetoPremiere ./YoutubetoPremiere.zip
          xcrun notarytool submit ./YoutubetoPremiere.zip --wait --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$TEAM_ID"
          xcrun stapler staple ./dist/cep/exec/YoutubetoPremiere

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist/

  package:
    needs: build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Merge executables and create ZXP
        run: |
          mkdir -p dist/cep/exec
          cp -r artifacts/dist-windows-latest/cep/exec/* dist/cep/exec/
          cp -r artifacts/dist-macos-latest/cep/exec/* dist/cep/exec/
          yarn zxp

      - name: GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ./dist/zxp/com.YoutubetoPremiereV2.cep.zxp
          generate_release_notes: true
