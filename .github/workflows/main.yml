name: Build and Package

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  mac-build-apple-silicon:
    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          architecture: 'arm64'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Sync clock
        run: sudo sntp -sS time.windows.com

      - name: Upgrade pip
        run: python -m pip install --upgrade pip setuptools wheel

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install python-dotenv

      - name: Install Node.js dependencies
        run: |
          yarn install --frozen-lockfile

      - name: Debug Secrets
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo "=== DEBUGGING SECRETS ==="
          echo "BUILD_CERTIFICATE_BASE64 length: ${#BUILD_CERTIFICATE_BASE64}"
          echo "P12_PASSWORD length: ${#P12_PASSWORD}"
          echo "KEYCHAIN_PASSWORD length: ${#KEYCHAIN_PASSWORD}"
          
          if [ -z "$BUILD_CERTIFICATE_BASE64" ]; then
            echo "❌ BUILD_CERTIFICATE_BASE64 is empty!"
            exit 1
          fi
          
          if [ -z "$P12_PASSWORD" ]; then
            echo "❌ P12_PASSWORD is empty!"
            exit 1
          fi
          
          if [ -z "$KEYCHAIN_PASSWORD" ]; then
            echo "❌ KEYCHAIN_PASSWORD is empty!"
            exit 1
          fi
          
          echo "✅ All required secrets are present"

      - name: Create and Configure Keychain
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          INSTALLER_CERTIFICATE_BASE64: ${{ secrets.SIGN_INSTALL_CERTIFICATE }}
          P12_INSTALL_PASSWORD: ${{ secrets.P12_INSTALL_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          INSTALLER_CERTIFICATE_PATH=$RUNNER_TEMP/installer_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/SelgykeyAPP.keychain-db
          
          # import application certificate from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
          echo "Application certificate decoded, size: $(wc -c < $CERTIFICATE_PATH) bytes"
          
          # import installer certificate from secrets
          echo -n "$INSTALLER_CERTIFICATE_BASE64" | base64 --decode > $INSTALLER_CERTIFICATE_PATH
          echo "Installer certificate decoded, size: $(wc -c < $INSTALLER_CERTIFICATE_PATH) bytes"
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import both certificates to keychain
          echo "Importing application certificate..."
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          
          echo "Importing installer certificate..."
          security import $INSTALLER_CERTIFICATE_PATH -P "$P12_INSTALL_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # List all identities in custom keychain
          echo "Listing all identities in SelgykeyAPP keychain:"
          security find-identity -p codesigning $KEYCHAIN_PATH

      - name: Build Application with PyInstaller
        run: |
          pip install --upgrade pyinstaller
          pyinstaller --onedir --clean --debug=all \
          --hidden-import=engineio.async_drivers.eventlet \
          --hidden-import=engineio.async_drivers.gevent_uwsgi \
          --hidden-import=engineio.async_drivers.gevent \
          --hidden-import=engineio.async_drivers.threading \
          --hidden-import=engineio.async_drivers \
          --hidden-import=gevent \
          --hidden-import=websocket \
          --hidden-import=websockets \
          --hidden-import=wsproto \
          --hidden-import=pygame \
          --hidden-import=PIL \
          --hidden-import=flask \
          --hidden-import=flask_cors \
          --hidden-import=flask_socketio \
          --hidden-import=yt_dlp \
          --hidden-import=pymiere \
          --hidden-import=psutil \
          --hidden-import=tkinter \
          --add-data "app/sounds/notification_sound.mp3:." \
          app/YoutubetoPremiere.py

      - name: Build CEP Extension
        run: |
          echo "Building CEP extension..."
          yarn build:cep
          echo "CEP build completed"
        env:
          ZXP_PACKAGE: false

      - name: Copy Python executable to CEP extension
        run: |
          echo "Copying Python executable to CEP extension..."
          rm -rf ./dist/cep/exec
          mkdir -p ./dist/cep/exec
          cp -R ./dist/YoutubetoPremiere/YoutubetoPremiere ./dist/cep/exec/
          cp -R ./dist/YoutubetoPremiere/_internal ./dist/cep/exec/
          echo "Python executable copied to CEP extension"

      - name: Make Executable
        run: |
          chmod +x ./dist/YoutubetoPremiere/YoutubetoPremiere

      - name: Sign the Application
        run: |
          echo "Signing the application..."
          codesign --deep --timestamp --options runtime --force --verify --verbose --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" "./dist/YoutubetoPremiere"

      - name: Sign all binaries in dist
        run: |
          echo "Signing all binaries and frameworks in dist directory..."
          # Find and sign all executables and libraries
          find ./dist -type f \( -name "*.dylib" -o -name "*.so" -o -perm +111 \) -exec codesign --timestamp --options runtime --force --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" {} \; 2>/dev/null || true
          
          # Sign any frameworks
          find ./dist -type d -name "*.framework" -exec codesign --deep --timestamp --options runtime --force --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" {} \; 2>/dev/null || true
          
          echo "All binaries signed"

      - name: Create PKG installer
        run: |
          echo "Creating PKG installer..."
          # Create PKG with proper macOS compatibility settings
          pkgbuild --root ./dist \
            --identifier com.selgy.youtubetopremiere \
            --version 1.0 \
            --install-location /Applications \
            --scripts ./scripts \
            --min-os-version 10.15 \
            YouTubetoPremiere.pkg
          echo "PKG installer created successfully"
          
      - name: Sign PKG installer
        run: |
          echo "Signing PKG installer..."
          # Use productsign with the installer certificate
          productsign --sign "Developer ID Installer: mickael ducatez (9H8DB46V75)" YouTubetoPremiere.pkg YouTubetoPremiere-signed.pkg
          mv YouTubetoPremiere-signed.pkg YouTubetoPremiere.pkg
          echo "PKG installer signed successfully"

      - name: Notarize PKG
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo "Creating keychain profile for notarization..."
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APP_SPECIFIC_PASSWORD"
          
          echo "Submitting PKG for notarization..."
          xcrun notarytool submit "YouTubetoPremiere.pkg" --keychain-profile "notarytool-profile" --wait

      - name: Upload macOS Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            YouTubetoPremiere.pkg

  windows-build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      - name: Install Node.js dependencies
        run: yarn install --frozen-lockfile

      - name: Build Application with PyInstaller
        run: |
          pip install --upgrade pyinstaller
          pyinstaller --onedir --clean --debug=all --hidden-import=engineio.async_drivers.eventlet --hidden-import=engineio.async_drivers.gevent_uwsgi --hidden-import=engineio.async_drivers.gevent --hidden-import=engineio.async_drivers.threading --hidden-import=engineio.async_drivers --hidden-import=gevent --hidden-import=websocket --hidden-import=websockets --hidden-import=wsproto --hidden-import=pygame --hidden-import=PIL --hidden-import=flask --hidden-import=flask_cors --hidden-import=flask_socketio --hidden-import=yt_dlp --hidden-import=pymiere --hidden-import=psutil --hidden-import=tkinter --add-data "app/sounds/notification_sound.mp3;." app/YoutubetoPremiere.py

      - name: Build CEP Extension
        run: |
          echo "Building CEP extension..."
          yarn build:cep
        env:
          ZXP_PACKAGE: false

      - name: Copy Python executable to CEP extension
        run: |
          echo "Copying Python executable to CEP extension..."
          if (Test-Path "./dist/cep/exec") { Remove-Item "./dist/cep/exec" -Recurse -Force }
          New-Item -ItemType Directory -Path "./dist/cep/exec" -Force
          Copy-Item -Path "./dist/YoutubetoPremiere/*" -Destination "./dist/cep/exec/" -Recurse -Force
          echo "Python executable copied successfully"
        shell: powershell



      - name: Create Windows Installer
        run: |
          echo "Creating Windows installer..."
          # Get version from package.json for NSIS
          $version = (Get-Content package.json | ConvertFrom-Json).version
          echo "Version: $version"
          # Set environment variable for NSIS (not command line parameter)
          $env:VERSION = $version
          makensis installer.nsi
          # Rename to standard name for upload
          $sourceFile = "YoutubetoPremiere-$version-Setup.exe"
          $targetFile = "YouTubetoPremiere-Setup.exe"
          if (Test-Path $sourceFile) {
            Rename-Item $sourceFile $targetFile
            echo "Renamed $sourceFile to $targetFile"
          } else {
            echo "Warning: $sourceFile not found"
          }
        shell: powershell

      - name: Upload Windows Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            YouTubetoPremiere-Setup.exe

  release:
    needs: [mac-build-apple-silicon, windows-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-build
          path: ./artifacts/macos

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: ./artifacts/windows

      - name: Get tag name
        id: tag
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.TAG_NAME }}
          release_name: Release ${{ steps.tag.outputs.TAG_NAME }}
          draft: false
          prerelease: false

      - name: Upload macOS PKG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos/YouTubetoPremiere.pkg
          asset_name: YouTubetoPremiere-macOS.pkg
          asset_content_type: application/octet-stream

      - name: Upload Windows EXE
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows/YouTubetoPremiere-Setup.exe
          asset_name: YouTubetoPremiere-Windows.exe
          asset_content_type: application/octet-stream 