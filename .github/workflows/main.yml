name: Build and Package

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  actions: read
  checks: read
  issues: read
  packages: read
  pull-requests: read
  repository-projects: read
  security-events: read
  statuses: read

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      app_changed: ${{ steps.check_app.outputs.changed }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      
      - name: Check for app changes
        id: check_app
        run: |
          git diff --name-only HEAD^ HEAD > changes.txt
          echo "changed=$(if grep -q '^app/' changes.txt; then echo 'true'; else echo 'false'; fi)" >> $GITHUB_OUTPUT

  build-ffmpeg:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-13]
    steps:
      - name: Check FFmpeg cache
        id: ffmpeg-cache
        uses: actions/cache@v3
        with:
          path: |
            ffmpeg${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          key: ffmpeg-${{ matrix.os }}-v1

      - name: Download and process FFmpeg
        if: steps.ffmpeg-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        
      - name: Download FFmpeg for Windows
        if: matrix.os == 'windows-latest' && steps.ffmpeg-cache.outputs.cache-hit != 'true'
        run: |
          $url = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
          Invoke-WebRequest -Uri $url -OutFile ffmpeg.zip
          Expand-Archive ffmpeg.zip -DestinationPath ffmpeg_temp
          Get-ChildItem -Path ffmpeg_temp -Recurse -Filter "ffmpeg.exe" | 
            Select-Object -First 1 | 
            ForEach-Object { Copy-Item $_.FullName -Destination "ffmpeg.exe" }
          Remove-Item -Path ffmpeg.zip -Force
          Remove-Item -Path ffmpeg_temp -Recurse -Force
        shell: pwsh

      - name: Download FFmpeg for macOS
        if: matrix.os == 'macos-13' && steps.ffmpeg-cache.outputs.cache-hit != 'true'
        run: |
          curl -L https://evermeet.cx/ffmpeg/ffmpeg-6.1.zip -o ffmpeg.zip
          unzip ffmpeg.zip
          chmod +x ffmpeg
          rm -f ffmpeg.zip

      - name: Sign FFmpeg (macOS)
        if: matrix.os == 'macos-13' && steps.ffmpeg-cache.outputs.cache-hit != 'true'
        env:
          CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          /usr/bin/codesign --force -s "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime ffmpeg
          rm -f certificate.p12

      - name: Upload FFmpeg artifact
        uses: actions/upload-artifact@v3
        with:
          name: ffmpeg-${{ matrix.os }}
          path: ffmpeg${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          retention-days: 1

  build-executables:
    needs: [check-changes]
    strategy:
      matrix:
        os: [windows-latest, macos-13]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Check existing artifact
        id: check_artifact
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: existing-artifact

      - name: Should build
        id: should_build
        run: |
          if [[ "${{ needs.check-changes.outputs.app_changed }}" == "false" && -f "existing-artifact/YoutubetoPremiere${{ matrix.os == 'windows-latest' && '.exe' || '' }}" ]]; then
            echo "build=false" >> $GITHUB_OUTPUT
          else
            echo "build=true" >> $GITHUB_OUTPUT
          fi
        shell: bash
      
      - name: Setup Python
        if: steps.should_build.outputs.build == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install Python dependencies
        if: steps.should_build.outputs.build == 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pygame
        
      - name: Build executable
        if: steps.should_build.outputs.build == 'true'
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            python -m PyInstaller YoutubetoPremiere.spec -y --workpath build/work --distpath ./
          else
            python -m PyInstaller YoutubetoPremiere.local.spec -y --workpath build/work --distpath ./
          fi
      
      - name: Sign executable (macOS)
        if: matrix.os == 'macos-13' && steps.should_build.outputs.build == 'true'
        env:
          CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          /usr/bin/codesign --force -s "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime YoutubetoPremiere
          find . -name "*.dylib" -exec /usr/bin/codesign --force -s "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime {} \;
          rm -f certificate.p12

      - name: Move existing artifact if not building
        if: steps.should_build.outputs.build == 'false'
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            mv existing-artifact/YoutubetoPremiere.exe ./
          else
            mv existing-artifact/YoutubetoPremiere ./
          fi
        shell: bash

      - name: Upload executable
        uses: actions/upload-artifact@v3
        with:
          name: executable-${{ matrix.os }}
          path: |
            ${{ matrix.os == 'windows-latest' && 'YoutubetoPremiere.exe' || 'YoutubetoPremiere' }}
          retention-days: 1
          if-no-files-found: error

  package-zxp:
    needs: [check-changes, build-ffmpeg, build-executables]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Create exec directory
        run: mkdir -p dist/cep/exec
        shell: bash

      # Download artifacts
      - name: Download Windows executable
        uses: actions/download-artifact@v4
        with:
          name: executable-windows-latest
          path: build/executables

      - name: Download macOS executable
        uses: actions/download-artifact@v4
        with:
          name: executable-macos-13
          path: build/executables

      - name: Download Windows FFmpeg
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-windows-latest
          path: build/executables

      - name: Download macOS FFmpeg
        uses: actions/download-artifact@v4
        with:
          name: ffmpeg-macos-13
          path: build/executables

      - name: List contents to verify
        shell: pwsh
        run: |
          Write-Host "Contents of dist/cep/exec:"
          Get-ChildItem -Path dist/cep/exec

      - name: Package ZXP
        env:
          SKIP_PYTHON_BUILD: true
          NO_PYTHON: true
          ZXP_PACKAGE: true
        run: yarn zxp

      - name: Verify ZXP Package
        shell: pwsh
        run: |
          if (-not (Test-Path "dist/zxp/*.zxp")) {
              Write-Error "ZXP package was not created!"
              exit 1
          }
          Write-Host "ZXP package created successfully"
          Get-ChildItem -Path dist/zxp

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./dist/zxp/*.zxp
          generate_release_notes: true
