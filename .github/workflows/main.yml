name: Build and Package

on:
  push:
    branches:
      - Pre-released

permissions:
  contents: write
  actions: read

jobs:
  mac-build-apple-silicon:
    runs-on: macos-14
    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10.11'
        architecture: 'arm64'

    - name: Sync clock
      run: sudo sntp -sS time.windows.com

    - name: Upgrade pip
      run: python -m pip install --upgrade pip setuptools wheel

    - name: Install dependencies
      run: |
          pip install -r requirements.txt
          pip install python-dotenv  # Install dotenv module

    - name: Debug Secrets
      env:
              BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
              P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
              BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
              KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
                echo "=== DEBUGGING SECRETS ==="
                echo "BUILD_CERTIFICATE_BASE64 length: ${#BUILD_CERTIFICATE_BASE64}"
                echo "P12_PASSWORD length: ${#P12_PASSWORD}"
                echo "BUILD_PROVISION_PROFILE_BASE64 length: ${#BUILD_PROVISION_PROFILE_BASE64}"
                echo "KEYCHAIN_PASSWORD length: ${#KEYCHAIN_PASSWORD}"
                
                if [ -z "$BUILD_CERTIFICATE_BASE64" ]; then
                  echo "❌ BUILD_CERTIFICATE_BASE64 is empty!"
                  exit 1
                fi
                
                if [ -z "$P12_PASSWORD" ]; then
                  echo "❌ P12_PASSWORD is empty!"
                  exit 1
                fi
                
                if [ -z "$KEYCHAIN_PASSWORD" ]; then
                  echo "❌ KEYCHAIN_PASSWORD is empty!"
                  exit 1
                fi
                
                echo "✅ All required secrets are present"

    - name: Create and Configure Keychain
      env:
              BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
              P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
              BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
              KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
                # create variables
                CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
                PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
                KEYCHAIN_PATH=$RUNNER_TEMP/SelgykeyAPP.keychain-db
        
                # import certificate and provisioning profile from secrets
                echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
                echo "Certificate decoded, size: $(wc -c < $CERTIFICATE_PATH) bytes"
                
                if [ ! -z "$BUILD_PROVISION_PROFILE_BASE64" ]; then
                  echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode > $PP_PATH
                fi
        
                # create temporary keychain
                security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
                security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
                security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        
                # import certificate to keychain with debugging
                echo "Importing certificate with password length: ${#P12_PASSWORD}"
                security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
                security list-keychain -d user -s $KEYCHAIN_PATH
        
                # Apply provisioning profile if it exists
                if [ ! -z "$BUILD_PROVISION_PROFILE_BASE64" ]; then
                  mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
                  cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
                fi
        
                # Find certificate in custom keychain
                echo "Finding certificate in SelgykeyAPP keychain:"
                security find-certificate -a $KEYCHAIN_PATH
        
                # List all identities in custom keychain
                echo "Listing all identities in SelgykeyAPP keychain:"
                security find-identity -p codesigning $KEYCHAIN_PATH

    - name: Set DYLD_LIBRARY_PATH
      run: |
                echo "Setting DYLD_LIBRARY_PATH to include Python library path"
                echo "DYLD_LIBRARY_PATH=/Users/runner/hostedtoolcache/Python/3.10.11/arm64/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
        
    - name: Sign Python Library
      run: |
            echo "Signing Python library..."
            codesign --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" --timestamp --options runtime --force --verbose /Users/runner/hostedtoolcache/Python/3.10.11/arm64/lib/libpython3.10.dylib
    
    - name: Verify Signed Python Library
      run: |
            echo "Verifying signed Python library..."
            codesign --verify --verbose /Users/runner/hostedtoolcache/Python/3.10.11/arm64/lib/libpython3.10.dylib
              
    - name: Build Application with PyInstaller
      run: |
        pip install --upgrade pyinstaller
        pyinstaller --onedir --clean --debug=all \
        --hidden-import=engineio.async_drivers.eventlet \
        --hidden-import=engineio.async_drivers.gevent_uwsgi \
        --hidden-import=engineio.async_drivers.gevent \
        --hidden-import=engineio.async_drivers.threading \
        --hidden-import=engineio.async_drivers \
        --hidden-import=gevent \
        --hidden-import=websocket \
        --hidden-import=websockets \
        --hidden-import=wsproto \
        --hidden-import=pygame \
        --hidden-import=PIL \
        --hidden-import=flask \
        --hidden-import=flask_cors \
        --hidden-import=flask_socketio \
        --hidden-import=yt_dlp \
        --hidden-import=pymiere \
        --hidden-import=psutil \
        --hidden-import=tkinter \
        --add-data "app/sounds/notification_sound.mp3:." \
        app/YoutubetoPremiere.py
        ls -la ./dist/
        
    - name: Verify Executable Contents
      run: |
              echo "Verifying executable contents..."
              ls -la ./dist/YoutubetoPremiere
      shell: /bin/bash -e {0}
      env:
          pythonLocation: /Users/runner/hostedtoolcache/Python/3.10.11/arm64

    - name: Make Executable
      run: |
        chmod +x ./dist/YoutubetoPremiere/YoutubetoPremiere

    - name: Sign all binaries
      run: |
          find ./dist -type f -exec codesign --timestamp --options runtime --force --verify --verbose --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" {} \;
        
    - name: Sign the Application
      run: |
              # Set shell to stop on error
              set -e
          
              # Extract and print the name of the certificate
              CERTIFICATE_NAME="Developer ID Application: mickael ducatez (9H8DB46V75)"
              echo "Certificate Name: $CERTIFICATE_NAME"
          
              # List contents of dist directory for debugging
              echo "Listing contents of dist directory:"
              ls -la dist
          
              # Use the certificate name to sign the application
              codesign --deep --timestamp --options runtime --force --verify --verbose --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" "./dist/YoutubetoPremiere"
              codesign --deep --timestamp --options runtime --force --verify --verbose --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" "./dist/YoutubetoPremiere/YoutubetoPremiere"          

    - name: "Notarize app bundle"
      env:
        MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.APPLE_ID }}
        MACOS_NOTARIZATION_PWD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
        MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        echo "Create keychain profile"
        xcrun notarytool store-credentials "notarytool-profile" --apple-id "${{ secrets.APPLE_ID }}" --team-id "${{ secrets.APPLE_TEAM_ID }}" --password "${{ secrets.APP_SPECIFIC_PASSWORD }}"

        echo "Creating temp notarization archive"
        ditto -c -k --keepParent "./dist/YoutubetoPremiere" "notarization.zip"

        echo "Notarize app"
        NOTARIZATION_OUTPUT=$(xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait --output-format json)
        NOTARIZATION_ID=$(echo "$NOTARIZATION_OUTPUT" | jq -r '.id')
        
        if [[ $NOTARIZATION_ID == "null" ]]; then
            echo "Notarization submission failed."
            echo "Output: $NOTARIZATION_OUTPUT"
            exit 1
        fi

        # Check Notarization Status
        echo "Checking Notarization Status for $NOTARIZATION_ID"
        xcrun notarytool info $NOTARIZATION_ID --keychain-profile "notarytool-profile"

        # Fetch and display the notarization log
        echo "Fetching notarization log for $NOTARIZATION_ID..."
        xcrun notarytool log $NOTARIZATION_ID --keychain-profile "notarytool-profile"

    - name: Make postinstall script executable
      run: sudo chmod +x ./scripts/postinstall
            
    - name: Prepare PKG content
      run: |
        mkdir pkgroot
        cp -R "./dist/YoutubetoPremiere" "./pkgroot/"
        cp -R "./com.selgy.youtubetopremiere" "./pkgroot/com.selgy.youtubetopremiere"
    
    - name: Create and Sign PKG
      env:
          INSTALLER_CERTIFICATE_BASE64: ${{ secrets.SIGN_INSTALL_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.P12_INSTALL_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/installer_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/Selgykey.keychain-db

          # Decode and import installer certificate from secrets
          echo -n "$INSTALLER_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
          echo "Installer certificate decoded, size: $(wc -c < $CERTIFICATE_PATH) bytes"

          # Create temporary keychain for installer certificate
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import with debugging
          echo "Importing installer certificate with password length: ${#P12_PASSWORD}"
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH

          # Set the keychain for codesigning
          security list-keychain -d user -s $KEYCHAIN_PATH

          PACKAGE_IDENTIFIER="com.selgy.youtubetopremiere"
          PACKAGE_VERSION="1.1"
          PKG_ROOT="./pkgroot"
          OUTPUT_PKG="YoutubetoPremiere.pkg"
          SCRIPTS_DIR="./scripts"
          ls -la pkgroot/

          pkgbuild --root "$PKG_ROOT" \
          --identifier "$PACKAGE_IDENTIFIER" \
          --version "$PACKAGE_VERSION" \
          --install-location "/Applications" \
          --scripts "$SCRIPTS_DIR" \
          "$OUTPUT_PKG"

          # Sign the package with the installer certificate
          PRODUCTSIGN_IDENTITY=$(security find-identity -v -p basic "$KEYCHAIN_PATH" | grep 'Developer ID Installer' | head -n 1 | awk '{print $2}')
          productsign --sign "$PRODUCTSIGN_IDENTITY" "$OUTPUT_PKG" "signed_$OUTPUT_PKG"

          # Verify the signed package
          pkgutil --check-signature "signed_$OUTPUT_PKG"

          # Remove temporary keychain
          security delete-keychain $KEYCHAIN_PATH

    - name: Notarize PKG Installer
      env:
                PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.APPLE_ID }}
                PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
                PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
      run: |
                  # Use existing keychain profile (already created in previous step)
                  echo "Using existing keychain profile for PKG notarization"
                  
                  # Create a ZIP file of the .pkg for notarization
                  echo "Creating temp notarization archive for PKG"
                  ditto -c -k --keepParent "signed_YoutubetoPremiere.pkg" "notarization_pkg.zip"
                  
                  # Send the notarization request for the PKG and capture the NOTARIZATION_ID
                  echo "Notarize PKG"
                  NOTARIZATION_OUTPUT=$(xcrun notarytool submit "notarization_pkg.zip" --keychain-profile "notarytool-profile" --wait --output-format json)
                  NOTARIZATION_ID=$(echo "$NOTARIZATION_OUTPUT" | jq -r '.id')
                  echo "Notarization ID for PKG: $NOTARIZATION_ID"
                  
                  if [[ $NOTARIZATION_ID == "null" ]]; then
                      echo "PKG Notarization submission failed."
                      echo "Output: $NOTARIZATION_OUTPUT"
                      exit 1
                  fi

                  # Check PKG Notarization Status
                  echo "Checking PKG Notarization Status for $NOTARIZATION_ID"
                  xcrun notarytool info $NOTARIZATION_ID --keychain-profile "notarytool-profile"

                  # Fetch and display the PKG notarization log
                  echo "Fetching PKG notarization log for $NOTARIZATION_ID..."
                  xcrun notarytool log $NOTARIZATION_ID --keychain-profile "notarytool-profile"

    - name: Get the release
      id: get_release
      uses: actions/github-script@v5
      with:
        script: |
          const { owner, repo } = context.repo
          const releases = await github.rest.repos.listReleases({ owner, repo })
          const preRelease = releases.data.find(release => release.prerelease && release.tag_name === 'V1.1')
          return preRelease.upload_url

    - name: Rename PKG file
      run: mv signed_YoutubetoPremiere.pkg YoutubetoPremiere_Mac_arm64.pkg
        
    - name: Upload executables to asset
      id: upload-release-asset
      uses: softprops/action-gh-release@v1
      env:
            GITHUB_TOKEN: ${{ secrets.GH_SECRET }}
      with:
            draft: ${{ github.ref == 'refs/heads/master' }}
            prerelease: ${{ github.ref != 'refs/heads/master' }}
            tag_name: V1.1
            files: |
              YoutubetoPremiere_Mac_arm64.pkg

  win-build:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with: 
        persist-credentials: false

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8.8'
      
    - name: Cache pip
      uses: actions/cache@v4
      with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Download FFmpeg
      run: |
        mkdir ffmpeg
        curl -L https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-6.1.1-full_build.7z -o ffmpeg.7z

    - name: Extract FFmpeg
      run: |
        7z x ffmpeg.7z -offmpeg -aoa

    - name: Rename FFmpeg Folder
      run: |
        mv ./ffmpeg/ffmpeg-6.1.1-full_build ./ffmpeg_win

    - name: Find ffmpeg.exe
      shell: pwsh
      run: |
        Get-ChildItem -Recurse -Filter ffmpeg.exe | Format-Table FullName
      
    - name: Install PyInstaller
      run: pip install pyinstaller

    - name: Build Application with PyInstaller
      run: |
        pyinstaller --onefile --clean --debug all `
        --hidden-import=engineio.async_drivers.eventlet `
        --hidden-import=engineio.async_drivers.gevent_uwsgi `
        --hidden-import=engineio.async_drivers.gevent `
        --hidden-import=engineio.async_drivers `
        --hidden-import=gevent `
        --hidden-import=engineio.async_drivers.threading `
        --hidden-import=pygame.freetype `
        --hidden-import=os `
        --hidden-import=time `
        --hidden-import=pygame.mixer `
        --hidden-import=yt_dlp `
        --hidden-import=pymiere `
        --hidden-import=sys `
        --hidden-import=logging `
        --hidden-import=flask_cors `
        --hidden-import=flask `
        --hidden-import=flask_socketio `
        --hidden-import=json `
        --hidden-import=threading `
        --hidden-import=PIL `
        --hidden-import=re `
        --hidden-import=psutil `
        --hidden-import=tkinter `
        --hidden-import=subprocess `
        --add-binary "./ffmpeg_win/bin/ffmpeg.exe;./ffmpeg_win/bin/" `
        --add-data "ChromeExtension/icon.png;." `
        --add-data "app/sounds/notification_sound.mp3;." `
        app/YoutubetoPremiere.py
    
    - name: Install NSIS
      run: |
        choco install nsis

    - name: Download and Install NSIS Process Plugin
      run: |
        curl -L -o NsProcess.zip http://nsis.sourceforge.net/mediawiki/images/archive/1/18/20140806212030!NsProcess.zip
        Expand-Archive -Path NsProcess.zip -DestinationPath "NsProcess"
        New-Item -ItemType Directory -Force -Path "C:\Program Files (x86)\NSIS\Plugins\x86-unicode"
        New-Item -ItemType Directory -Force -Path "C:\Program Files (x86)\NSIS\Include"
        Move-Item -Path "NsProcess\Plugin\*" -Destination "C:\Program Files (x86)\NSIS\Plugins\x86-unicode" -Force
        Move-Item -Path "NsProcess\Include\*" -Destination "C:\Program Files (x86)\NSIS\Include" -Force
      shell: pwsh

    - name: List NSIS Plugin and Include Directories
      run: |
        ls "C:\Program Files (x86)\NSIS\Plugins\x86-unicode"
        ls "C:\Program Files (x86)\NSIS\Include"
      shell: pwsh

    - name: Compile Installer with NSIS
      run: makensis ./installer.nsi

    - name: List directory contents dist
      run: dir dist
    
    - name: Get the release
      id: get_release
      uses: actions/github-script@v5
      with:
        script: |
          const { owner, repo } = context.repo;
          const releases = await github.rest.repos.listReleases({ owner, repo });
          const preRelease = releases.data.find(release => release.prerelease && release.tag_name === 'V1.1');
          return preRelease ? preRelease.upload_url : null;
        github-token: ${{ secrets.GITHUB_TOKEN }}
        debug: false
        user-agent: actions/github-script
        result-encoding: json
      env:
        pythonLocation: C:\hostedtoolcache\windows\Python\3.8.8\x64
    
    - name: Upload executables to asset
      id: upload-release-asset
      uses: softprops/action-gh-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GH_SECRET }}
      with:
          draft: ${{ github.ref == 'refs/heads/master' }}
          prerelease: ${{ github.ref != 'refs/heads/master' }}
          tag_name: V1.1
          files: |
              YoutubetoPremiereInstaller.exe 