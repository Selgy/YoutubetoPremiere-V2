name: Build and Package

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  actions: read
  checks: read
  issues: read
  packages: read
  pull-requests: read
  repository-projects: read
  security-events: read
  statuses: read

jobs:
  check-artifacts:
    runs-on: ubuntu-latest
    outputs:
      ffmpeg-windows: ${{ steps.check-ffmpeg-windows.outputs.windows }}
      ffmpeg-macos: ${{ steps.check-ffmpeg-macos.outputs.macos }}
      executable-windows: ${{ steps.check-executable-windows.outputs.windows }}
      executable-macos: ${{ steps.check-executable-macos.outputs.macos }}
      app-changed: ${{ steps.check-changes.outputs.changed }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      
      - name: Download Windows FFmpeg
        id: get-ffmpeg-windows
        uses: dawidd6/action-download-artifact@v2
        continue-on-error: true
        with:
          github_token: ${{ github.token }}
          workflow: main.yml
          name: ffmpeg-windows-latest
          path: temp/ffmpeg-windows-latest
          search_artifacts: true
          workflow_conclusion: completed
          if_no_artifact_found: warn

      - name: Download macOS FFmpeg
        id: get-ffmpeg-macos
        uses: dawidd6/action-download-artifact@v2
        continue-on-error: true
        with:
          github_token: ${{ github.token }}
          workflow: main.yml
          name: ffmpeg-macos-latest
          path: temp/ffmpeg-macos-latest
          search_artifacts: true
          workflow_conclusion: completed
          if_no_artifact_found: warn

      - name: Download Windows executable
        id: get-executable-windows
        uses: dawidd6/action-download-artifact@v2
        continue-on-error: true
        with:
          github_token: ${{ github.token }}
          workflow: main.yml
          name: executable-windows-latest
          path: temp/executable-windows-latest
          search_artifacts: true
          workflow_conclusion: completed
          if_no_artifact_found: warn

      - name: Download macOS executable
        id: get-executable-macos
        uses: dawidd6/action-download-artifact@v2
        continue-on-error: true
        with:
          github_token: ${{ github.token }}
          workflow: main.yml
          name: executable-macos-latest
          path: temp/executable-macos-latest
          search_artifacts: true
          workflow_conclusion: completed
          if_no_artifact_found: warn

      - name: Check for Windows FFmpeg
        id: check-ffmpeg-windows
        shell: bash
        run: |
          if [[ -f "temp/ffmpeg-windows-latest/ffmpeg.exe" ]]; then
            mkdir -p src/exec
            cp temp/ffmpeg-windows-latest/ffmpeg.exe src/exec/
            echo "windows=true" >> "$GITHUB_OUTPUT"
          else
            echo "windows=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check for macOS FFmpeg
        id: check-ffmpeg-macos
        shell: bash
        run: |
          if [[ -f "temp/ffmpeg-macos-latest/ffmpeg" ]]; then
            mkdir -p src/exec
            cp temp/ffmpeg-macos-latest/ffmpeg src/exec/
            echo "macos=true" >> "$GITHUB_OUTPUT"
          else
            echo "macos=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check for Windows executable
        id: check-executable-windows
        shell: bash
        run: |
          if [[ -f "temp/executable-windows-latest/build/YoutubetoPremiere/YoutubetoPremiere.exe" ]]; then
            mkdir -p build/YoutubetoPremiere
            cp -r temp/executable-windows-latest/build/YoutubetoPremiere/* build/YoutubetoPremiere/
            echo "windows=true" >> "$GITHUB_OUTPUT"
          else
            echo "windows=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check for macOS executable
        id: check-executable-macos
        shell: bash
        run: |
          if [[ -f "temp/executable-macos-latest/build/YoutubetoPremiere/YoutubetoPremiere" ]]; then
            mkdir -p build/YoutubetoPremiere
            cp -r temp/executable-macos-latest/build/YoutubetoPremiere/* build/YoutubetoPremiere/
            echo "macos=true" >> "$GITHUB_OUTPUT"
          else
            echo "macos=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload found artifacts
        if: steps.check-ffmpeg-windows.outputs.windows == 'true' || steps.check-ffmpeg-macos.outputs.macos == 'true' || steps.check-executable-windows.outputs.windows == 'true' || steps.check-executable-macos.outputs.macos == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: found-artifacts
          path: |
            src/exec/ffmpeg*
            build/YoutubetoPremiere/YoutubetoPremiere*

      - name: Check for app changes
        id: check-changes
        run: |
          git diff --name-only HEAD^ HEAD > changes.txt
          if grep -q "^app/" changes.txt || grep -q "requirements.txt" changes.txt || grep -q "YoutubetoPremiere.spec" changes.txt; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

  build-ffmpeg:
    needs: check-artifacts
    if: needs.check-artifacts.outputs.ffmpeg-windows == 'false' || needs.check-artifacts.outputs.ffmpeg-macos == 'false'
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Download FFmpeg for Windows
        if: matrix.os == 'windows-latest' && needs.check-artifacts.outputs.ffmpeg-windows == 'false'
        run: |
          $url = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
          Invoke-WebRequest -Uri $url -OutFile ffmpeg.zip
          Expand-Archive ffmpeg.zip -DestinationPath ffmpeg_temp
          New-Item -ItemType Directory -Force -Path src/exec
          Get-ChildItem -Path ffmpeg_temp -Recurse -Filter "ffmpeg.exe" | 
            Select-Object -First 1 | 
            ForEach-Object { Copy-Item $_.FullName -Destination "src/exec/ffmpeg.exe" }
        shell: pwsh

      - name: Download FFmpeg for macOS
        if: matrix.os == 'macos-latest' && needs.check-artifacts.outputs.ffmpeg-macos == 'false'
        run: |
          curl -L https://evermeet.cx/ffmpeg/ffmpeg-6.1.zip -o ffmpeg.zip
          unzip ffmpeg.zip
          mkdir -p src/exec
          mv ffmpeg src/exec/
          chmod +x src/exec/ffmpeg

      - name: Sign FFmpeg (macOS)
        if: matrix.os == 'macos-latest' && needs.check-artifacts.outputs.ffmpeg-macos == 'false'
        env:
          CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          /usr/bin/codesign --force -s "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime src/exec/ffmpeg

      - name: Upload FFmpeg artifact
        uses: actions/upload-artifact@v3
        with:
          name: ffmpeg-${{ matrix.os }}
          path: src/exec/ffmpeg*

  build-executables:
    needs: [check-artifacts, build-ffmpeg]
    if: |
      needs.check-artifacts.outputs.app-changed == 'true' || 
      needs.check-artifacts.outputs.executable-windows == 'false' || 
      needs.check-artifacts.outputs.executable-macos == 'false'
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pygame
          
      - name: Download FFmpeg artifact
        uses: actions/download-artifact@v3
        with:
          name: ffmpeg-${{ matrix.os }}
          path: src/exec/
          
      - name: Make FFmpeg executable (macOS)
        if: matrix.os == 'macos-latest'
        run: chmod +x src/exec/ffmpeg
        
      - name: Build executable
        run: python -m PyInstaller YoutubetoPremiere.spec -y --workpath build/work --distpath build/YoutubetoPremiere
        shell: bash

      - name: Sign executable (macOS)
        if: matrix.os == 'macos-latest'
        env:
          CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $CERTIFICATE_BASE64 | base64 --decode > certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          /usr/bin/codesign --force -s "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime build/YoutubetoPremiere/YoutubetoPremiere
          find build/YoutubetoPremiere -name "*.dylib" -exec /usr/bin/codesign --force -s "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime {} \;

      - name: Upload executable artifact
        uses: actions/upload-artifact@v3
        with:
          name: executable-${{ matrix.os }}
          path: |
            build/YoutubetoPremiere/YoutubetoPremiere${{ matrix.os == 'windows-latest' && '.exe' || '' }}

      - name: Build CEP
        shell: bash
        env:
          SKIP_PYTHON_BUILD: true
          NO_PYTHON: true
        run: |
          yarn clean
          yarn tsc -p "tsconfig-build.json"
          yarn cross-env vite build --force --watch false
          
          # Verify executables after build
          echo "Checking dist/cep/exec contents after build:"
          ls -la dist/cep/exec

      - name: Package ZXP
        shell: pwsh
        env:
          ZXP_PACKAGE: true
          NO_PYTHON: true
          SKIP_PYTHON_BUILD: true
        run: |
          # Verify executables before packaging
          Write-Host "Checking dist/cep/exec contents before packaging:"
          Get-ChildItem -Path dist/cep/exec -Force
          
          yarn zxp
          
          # Verify the ZXP package was created
          if (-not (Test-Path "dist/zxp/*.zxp")) {
            Write-Error "ZXP package was not created!"
            exit 1
          }
          Write-Host "ZXP package created successfully"
          
          # Verify contents after packaging
          Write-Host "Checking dist/cep/exec contents after packaging:"
          Get-ChildItem -Path dist/cep/exec -Force

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./dist/zxp/*.zxp
          generate_release_notes: true

  package-zxp:
    needs: [check-artifacts, build-executables]
    if: |
      always() &&
      (
        (needs.check-artifacts.outputs.app-changed == 'false' && 
         needs.check-artifacts.outputs.executable-windows == 'true' && 
         needs.check-artifacts.outputs.executable-macos == 'true' && 
         needs.check-artifacts.outputs.ffmpeg-windows == 'true' && 
         needs.check-artifacts.outputs.ffmpeg-macos == 'true') ||
        needs.build-executables.result == 'success'
      )
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache yarn dependencies
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        shell: pwsh
        run: |
          Remove-Item -Path package-lock.json -Force -ErrorAction SilentlyContinue
          yarn install --prefer-offline --frozen-lockfile --network-timeout 300000 --network-concurrency 1
          if (-not (Test-Path node_modules/typescript)) {
            yarn add -D typescript --prefer-offline
          }
          if (-not (Test-Path node_modules/cross-env)) {
            yarn add -D cross-env --prefer-offline
          }

      - name: Create directories
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path dist/cep/exec
          New-Item -ItemType Directory -Force -Path artifacts/build/YoutubetoPremiere
          New-Item -ItemType Directory -Force -Path artifacts/src/exec
          
      - name: Download found artifacts
        uses: dawidd6/action-download-artifact@v2
        continue-on-error: true
        with:
          github_token: ${{ github.token }}
          workflow: main.yml
          name: found-artifacts
          path: artifacts
          search_artifacts: true
          workflow_conclusion: completed
          if_no_artifact_found: warn

      - name: Download build artifacts
        uses: dawidd6/action-download-artifact@v2
        continue-on-error: true
        with:
          github_token: ${{ github.token }}
          workflow: main.yml
          path: artifacts
          search_artifacts: true
          workflow_conclusion: completed
          if_no_artifact_found: warn
          name_is_regexp: true
          name: ^(executable|ffmpeg)-(windows|macos)-latest$

      - name: List downloaded artifacts
        shell: pwsh
        run: |
          Write-Host "Contents of artifacts directory:"
          Get-ChildItem -Path artifacts -Recurse -Force

      - name: Copy executables and FFmpeg
        shell: pwsh
        run: |
          # Function to copy file with better error handling
          function Copy-FileWithCheck {
            param (
              [string]$Source,
              [string]$Destination,
              [string]$Description
            )
            
            Write-Host "Looking for $Description at: $Source"
            if (Test-Path $Source) {
              Copy-Item -Path $Source -Destination $Destination -Force
              Write-Host "$Description copied successfully"
              return $true
            } else {
              Write-Host "Warning: $Description not found at $Source"
              # List parent directory contents to help debug
              $parentDir = Split-Path -Parent $Source
              if (Test-Path $parentDir) {
                Write-Host "Contents of parent directory:"
                Get-ChildItem -Path $parentDir -Recurse
              }
              return $false
            }
          }

          $errors = @()
          
          # Copy Windows files
          if (-not (Copy-FileWithCheck -Source "artifacts/executable-windows-latest/build/YoutubetoPremiere/YoutubetoPremiere.exe" -Destination "dist/cep/exec/" -Description "Windows exe")) {
            if (-not (Copy-FileWithCheck -Source "artifacts/YoutubetoPremiere.exe" -Destination "dist/cep/exec/" -Description "Windows exe (alternative path)")) {
              $errors += "Windows exe"
            }
          }
          
          if (-not (Copy-FileWithCheck -Source "artifacts/ffmpeg-windows-latest/ffmpeg.exe" -Destination "dist/cep/exec/" -Description "Windows FFmpeg")) {
            if (-not (Copy-FileWithCheck -Source "artifacts/ffmpeg.exe" -Destination "dist/cep/exec/" -Description "Windows FFmpeg (alternative path)")) {
              $errors += "Windows FFmpeg"
            }
          }
          
          # Copy macOS files
          if (-not (Copy-FileWithCheck -Source "artifacts/executable-macos-latest/build/YoutubetoPremiere/YoutubetoPremiere" -Destination "dist/cep/exec/" -Description "macOS executable")) {
            if (-not (Copy-FileWithCheck -Source "artifacts/YoutubetoPremiere" -Destination "dist/cep/exec/" -Description "macOS executable (alternative path)")) {
              $errors += "macOS executable"
            }
          }
          
          if (-not (Copy-FileWithCheck -Source "artifacts/ffmpeg-macos-latest/ffmpeg" -Destination "dist/cep/exec/" -Description "macOS FFmpeg")) {
            if (-not (Copy-FileWithCheck -Source "artifacts/ffmpeg" -Destination "dist/cep/exec/" -Description "macOS FFmpeg (alternative path)")) {
              $errors += "macOS FFmpeg"
            }
          }

          # List contents of dist/cep/exec to verify
          Write-Host "`nContents of dist/cep/exec:"
          Get-ChildItem -Path dist/cep/exec -Force
          
          # List contents of artifacts to help debug
          Write-Host "`nContents of artifacts directory:"
          Get-ChildItem -Path artifacts -Recurse -Force
          
          # Report any missing files
          if ($errors.Count -gt 0) {
            Write-Error "Failed to copy the following files: $($errors -join ', ')"
            exit 1
          }

      - name: Build CEP
        shell: bash
        env:
          SKIP_PYTHON_BUILD: true
          NO_PYTHON: true
        run: |
          yarn clean
          yarn tsc -p "tsconfig-build.json"
          yarn cross-env vite build --force --watch false
          
          # Verify executables after build
          echo "Checking dist/cep/exec contents after build:"
          ls -la dist/cep/exec

      - name: Package ZXP
        shell: pwsh
        env:
          ZXP_PACKAGE: true
          NO_PYTHON: true
          SKIP_PYTHON_BUILD: true
        run: |
          # Verify executables before packaging
          Write-Host "Checking dist/cep/exec contents before packaging:"
          Get-ChildItem -Path dist/cep/exec -Force
          
          yarn zxp
          
          # Verify the ZXP package was created
          if (-not (Test-Path "dist/zxp/*.zxp")) {
            Write-Error "ZXP package was not created!"
            exit 1
          }
          Write-Host "ZXP package created successfully"
          
          # Verify contents after packaging
          Write-Host "Checking dist/cep/exec contents after packaging:"
          Get-ChildItem -Path dist/cep/exec -Force

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./dist/zxp/*.zxp
          generate_release_notes: true
