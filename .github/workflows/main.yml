name: Build and Package Pre-Release

on:
  push:
    branches:
      - Pre-released
    tags:
      - 'v*'

permissions:
  contents: write
  actions: read

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
      is_prerelease: ${{ steps.check_tag.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if triggered by tag
        id: check_tag
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "Running as a release build from tag"
          else
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "Running as a pre-release build"
          fi

      - name: Get package.json version
        id: package_version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # Extract version from tag
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "Version from tag: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            # Read version from package.json
            VERSION=$(node -p "require('./package.json').version")
            echo "Version from package.json: $VERSION"
            echo "package_version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Set version
        id: set_version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${{ steps.package_version.outputs.version }}
          else
            VERSION="${{ steps.package_version.outputs.package_version }}-pre.$(date +'%Y%m%d%H%M')"
          fi
          echo "Setting version to $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  mac-build-apple-silicon:
    needs: prepare
    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install Node.js dependencies
        run: yarn install --frozen-lockfile

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          architecture: 'arm64'
          cache: 'pip'

      - name: Sync clock
        run: sudo sntp -sS time.windows.com

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install python-dotenv

      - name: Create and Configure Keychain
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/SelgykeyAPP.keychain-db
          
          # Debug the certificate variable (showing length, not content)
          echo "BUILD_CERTIFICATE_BASE64 length: ${#BUILD_CERTIFICATE_BASE64}"
          
          if [[ -z "$BUILD_CERTIFICATE_BASE64" ]]; then
            echo "Error: BUILD_CERTIFICATE_BASE64 is empty or not set!"
            exit 1
          fi
          
          # Import certificate and provisioning profile from secrets
          echo "Decoding certificate..."
          # Write base64 content to a file first, then decode
          echo "$BUILD_CERTIFICATE_BASE64" > $RUNNER_TEMP/cert.b64
          # Check if file was created and has content
          if [ ! -s "$RUNNER_TEMP/cert.b64" ]; then
            echo "Error: cert.b64 file is empty! Direct writing failed."
            exit 1
          fi
          
          # Decode using a different approach
          cat $RUNNER_TEMP/cert.b64 | base64 -d > $CERTIFICATE_PATH
          
          # Alternative decoding method if the above fails
          if [ ! -s "$CERTIFICATE_PATH" ]; then
            echo "First decoding method failed, trying alternative..."
            # Try direct piping with explicit OS X base64 option
            echo "$BUILD_CERTIFICATE_BASE64" | base64 -D > $CERTIFICATE_PATH
          fi
          
          # Check if the certificate file was created correctly
          if [ ! -s "$CERTIFICATE_PATH" ]; then
            echo "Error: Certificate file is empty after both decoding attempts!"
            # Print the first few characters of the base64 string for debugging
            echo "First 20 chars of BUILD_CERTIFICATE_BASE64: ${BUILD_CERTIFICATE_BASE64:0:20}..."
            exit 1
          fi
          
          echo "Certificate file size: $(wc -c < $CERTIFICATE_PATH) bytes"
          
          # Decode provisioning profile if provided
          if [ -n "$BUILD_PROVISION_PROFILE_BASE64" ]; then
            echo "Decoding provisioning profile..."
            echo "$BUILD_PROVISION_PROFILE_BASE64" | base64 -D > $PP_PATH || echo "$BUILD_PROVISION_PROFILE_BASE64" | base64 -d > $PP_PATH
            
            if [ ! -s "$PP_PATH" ]; then
              echo "Warning: Provisioning profile file is empty. Continuing without it."
            else
              echo "Provisioning profile created successfully."
            fi
          fi
          
          # Create and configure keychain
          echo "Creating temporary keychain..."
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH || true
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Set keychain as default - fixed approach
          EXISTING_KEYCHAINS=$(security list-keychains | grep -v $KEYCHAIN_PATH || echo "")
          security list-keychains -s $KEYCHAIN_PATH $EXISTING_KEYCHAINS
          security default-keychain -s $KEYCHAIN_PATH
          
          # Allow codesigning
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          echo "Importing certificate to keychain..."
          if ! security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH; then
            echo "Certificate import failed. Attempting with alternate options..."
            security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH -T /usr/bin/codesign
          fi
          
          # Apply provisioning profile if it exists
          if [ -f "$PP_PATH" ] && [ -s "$PP_PATH" ]; then
            echo "Installing provisioning profile..."
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          fi
          
          # Find certificate in custom keychain
          echo "Finding certificate in SelgykeyAPP keychain:"
          security find-certificate -a $KEYCHAIN_PATH
          
          # List all identities in custom keychain
          echo "Listing all identities in SelgykeyAPP keychain:"
          security find-identity -p codesigning $KEYCHAIN_PATH
          
          # Check if we have a valid code signing identity
          if ! security find-identity -p codesigning $KEYCHAIN_PATH | grep -q "valid identities"; then
            echo "Warning: No valid code signing identities found in keychain. Signing may fail."
          fi

      - name: Set DYLD_LIBRARY_PATH
        run: |
          echo "Setting DYLD_LIBRARY_PATH to include Python library path"
          echo "DYLD_LIBRARY_PATH=/Users/runner/hostedtoolcache/Python/3.10.11/arm64/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
        
      - name: Sign Python Library
        run: |
          echo "Signing Python library..."
          codesign --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" --timestamp --options runtime --force --verbose /Users/runner/hostedtoolcache/Python/3.10.11/arm64/lib/libpython3.10.dylib
      
      - name: Verify Signed Python Library
        run: |
          echo "Verifying signed Python library..."
          codesign --verify --verbose /Users/runner/hostedtoolcache/Python/3.10.11/arm64/lib/libpython3.10.dylib

      - name: Setup FFmpeg
        run: |
          echo "Setting up FFmpeg..."
          mkdir -p app/exec
          curl -L https://evermeet.cx/ffmpeg/ffmpeg-6.1.1.zip -o ffmpeg.zip
          unzip -q ffmpeg.zip
          mv ffmpeg app/exec/
          chmod +x app/exec/ffmpeg
          ls -la app/exec/
      
      - name: Build with Yarn (includes both extension and executable)
        run: |
          echo "Building with yarn build-mac..."
          # Set NO_WATCH to true to prevent the build from watching for changes
          export NO_WATCH=true
          yarn build-mac
          
          # Check the results
          echo "Checking extension and executable files after build:"
          ls -la dist/ || echo "dist directory not found!"
              
      - name: Verify Executable Contents
        run: |
          echo "Verifying executable contents..."
          ls -la ./dist/YoutubetoPremiere || echo "YoutubetoPremiere directory not found!"
          echo "Verifying extension files:"
          ls -la ./dist/cep || echo "CEP directory not found!"
        shell: /bin/bash -e {0}

      - name: Copy CEP extension to the executable directory
        run: |
          mkdir -p ./dist/YoutubetoPremiere/com.selgy.youtubetopremiere
          cp -R ./dist/cep/* ./dist/YoutubetoPremiere/com.selgy.youtubetopremiere/ || echo "Error copying CEP files"

      - name: Sign all binaries
        run: |
          find ./dist -type f -perm +111 -exec codesign --timestamp --options runtime --force --verify --verbose --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" {} \;
          
      - name: Sign the Application
        run: |
          # Sign the main application directory
          codesign --deep --timestamp --options runtime --force --verify --verbose --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" "./dist/YoutubetoPremiere"
          
          # Sign the main executable
          codesign --deep --timestamp --options runtime --force --verify --verbose --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" "./dist/YoutubetoPremiere/YoutubetoPremiere"

      - name: "Notarize app bundle"
        env:
          MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.APPLE_ID }}
          MACOS_NOTARIZATION_PWD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo "Create keychain profile"
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$MACOS_NOTARIZATION_APPLE_ID" --team-id "$MACOS_NOTARIZATION_TEAM_ID" --password "$MACOS_NOTARIZATION_PWD"

          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "./dist/YoutubetoPremiere" "notarization.zip"

          echo "Notarize app"
          NOTARIZATION_OUTPUT=$(xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait --output-format json)
          NOTARIZATION_ID=$(echo "$NOTARIZATION_OUTPUT" | jq -r '.id')
          
          if [[ $NOTARIZATION_ID == "null" ]]; then
              echo "Notarization submission failed."
              echo "Output: $NOTARIZATION_OUTPUT"
              exit 1
          fi

          # Check Notarization Status
          echo "Checking Notarization Status for $NOTARIZATION_ID"
          xcrun notarytool info $NOTARIZATION_ID --keychain-profile "notarytool-profile"

          # Fetch and display the notarization log
          echo "Fetching notarization log for $NOTARIZATION_ID..."
          xcrun notarytool log $NOTARIZATION_ID --keychain-profile "notarytool-profile"

      - name: Make postinstall script executable
        run: sudo chmod +x ./scripts/postinstall
            
      - name: Prepare PKG content
        run: |
          mkdir -p pkgroot
          cp -R "./dist/YoutubetoPremiere" "./pkgroot/"
    
      - name: Create and Sign PKG
        env:
          INSTALLER_CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/installer_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/Selgykey.keychain-db

          # Debug the certificate variable (showing length, not content)
          echo "INSTALLER_CERTIFICATE_BASE64 length: ${#INSTALLER_CERTIFICATE_BASE64}"
          
          if [[ -z "$INSTALLER_CERTIFICATE_BASE64" ]]; then
            echo "Error: INSTALLER_CERTIFICATE_BASE64 is empty or not set!"
            exit 1
          fi

          # Decode and import installer certificate from secrets
          echo "Decoding installer certificate..."
          # Write base64 content to a file first, then decode
          echo "$INSTALLER_CERTIFICATE_BASE64" > $RUNNER_TEMP/inst_cert.b64
          # Check if file was created and has content
          if [ ! -s "$RUNNER_TEMP/inst_cert.b64" ]; then
            echo "Error: inst_cert.b64 file is empty! Direct writing failed."
            exit 1
          fi
          
          # Decode using different approaches
          cat $RUNNER_TEMP/inst_cert.b64 | base64 -d > $CERTIFICATE_PATH
          
          # Alternative decoding method if the above fails
          if [ ! -s "$CERTIFICATE_PATH" ]; then
            echo "First decoding method failed, trying alternative..."
            # Try direct piping with explicit OS X base64 option
            echo "$INSTALLER_CERTIFICATE_BASE64" | base64 -D > $CERTIFICATE_PATH
          fi
          
          # Check if the certificate file was created correctly
          if [ ! -s "$CERTIFICATE_PATH" ]; then
            echo "Error: Installer certificate file is empty after both decoding attempts!"
            # Print the first few characters of the base64 string for debugging
            echo "First 20 chars of INSTALLER_CERTIFICATE_BASE64: ${INSTALLER_CERTIFICATE_BASE64:0:20}..."
            exit 1
          fi
          
          echo "Installer certificate file size: $(wc -c < $CERTIFICATE_PATH) bytes"

          # Create temporary keychain for installer certificate
          echo "Creating installer certificate keychain..."
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH || true
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Set keychain as default
          security list-keychains -d user -s $KEYCHAIN_PATH $(security list-keychains -d user | sed s/\"//g)
          security default-keychain -s $KEYCHAIN_PATH
          
          # Allow codesigning
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          echo "Importing installer certificate to keychain..."
          if ! security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH; then
            echo "Certificate import failed. Attempting with alternate options..."
            security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH -T /usr/bin/productsign
          fi
          
          # List the certificate details
          echo "Listing installer certificate details:"
          security find-certificate -a $KEYCHAIN_PATH
          
          # Find code signing identities
          PRODUCTSIGN_IDENTITY=$(security find-identity -v -p basic $KEYCHAIN_PATH | grep 'Developer ID Installer' | head -n 1 | awk '{print $2}')
          echo "Found installer signing identity: $PRODUCTSIGN_IDENTITY"
          
          if [ -z "$PRODUCTSIGN_IDENTITY" ]; then
            echo "Error: Could not find a valid installer signing identity!"
            echo "Available identities:"
            security find-identity -v -p basic $KEYCHAIN_PATH
            exit 1
          fi

          # Build the package
          PACKAGE_IDENTIFIER="com.selgy.youtubetopremiere"
          PACKAGE_VERSION="${{ needs.prepare.outputs.version }}"
          PKG_ROOT="./pkgroot"
          OUTPUT_PKG="YoutubetoPremiere.pkg"
          SCRIPTS_DIR="./scripts"
          
          ls -la pkgroot/

          # Build package
          echo "Building package..."
          pkgbuild --root "$PKG_ROOT" \
            --identifier "$PACKAGE_IDENTIFIER" \
            --version "$PACKAGE_VERSION" \
            --install-location "/Applications" \
            --scripts "$SCRIPTS_DIR" \
            "$OUTPUT_PKG"

          # Sign the package with the installer certificate
          echo "Signing package with identity: $PRODUCTSIGN_IDENTITY"
          productsign --sign "$PRODUCTSIGN_IDENTITY" "$OUTPUT_PKG" "signed_$OUTPUT_PKG"

          # Verify the signed package
          echo "Verifying signed package..."
          pkgutil --check-signature "signed_$OUTPUT_PKG"

          # Remove temporary keychain
          security delete-keychain $KEYCHAIN_PATH

      - name: Notarize PKG Installer
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          # Store the notarization credentials
          echo "Create keychain profile for notarization"
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APP_SPECIFIC_PASSWORD"
          
          # Create a ZIP file of the .pkg for notarization
          echo "Creating temp notarization archive for PKG"
          ditto -c -k --keepParent "signed_YoutubetoPremiere.pkg" "notarization_pkg.zip"
          
          # Send the notarization request for the PKG and capture the NOTARIZATION_ID
          echo "Notarize PKG"
          NOTARIZATION_OUTPUT=$(xcrun notarytool submit "notarization_pkg.zip" --keychain-profile "notarytool-profile" --wait --output-format json)
          NOTARIZATION_ID=$(echo "$NOTARIZATION_OUTPUT" | jq -r '.id')
          echo "Notarization ID for PKG: $NOTARIZATION_ID"
                 
      - name: Rename PKG file
        run: mv signed_YoutubetoPremiere.pkg YoutubetoPremiere_Mac_arm64_${{ needs.prepare.outputs.version }}.pkg
        
      - name: Upload Mac ARM64 package
        uses: actions/upload-artifact@v4
        with:
          name: mac-arm64-package
          path: YoutubetoPremiere_Mac_arm64_${{ needs.prepare.outputs.version }}.pkg
          retention-days: 7

  win-build:
    needs: prepare
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install Node.js dependencies
        run: yarn install --frozen-lockfile

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9.0'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download FFmpeg
        run: |
          mkdir ffmpeg
          curl -L https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full.7z -o ffmpeg.7z

      - name: Extract FFmpeg
        run: |
          7z x ffmpeg.7z -offmpeg -aoa

      - name: List FFmpeg directory
        run: |
          dir ffmpeg
        shell: pwsh
          
      - name: Rename FFmpeg Folder
        run: |
          $ffmpgDir = Get-ChildItem -Path ./ffmpeg -Directory | Select-Object -First 1
          Rename-Item -Path $ffmpgDir.FullName -NewName "ffmpeg_win"
          Move-Item -Path ./ffmpeg/ffmpeg_win -Destination ./
        shell: pwsh

      - name: Find ffmpeg.exe
        shell: pwsh
        run: |
          Get-ChildItem -Recurse -Filter ffmpeg.exe | Format-Table FullName

      - name: Copy FFmpeg to app/exec directory
        shell: pwsh
        run: |
          # Make sure the destination directory exists
          New-Item -Path "app/exec" -ItemType Directory -Force
          
          # Copy ffmpeg.exe to the app/exec directory
          Copy-Item -Path "./ffmpeg_win/bin/ffmpeg.exe" -Destination "app/exec/ffmpeg.exe" -Force
          
          # Verify the copy
          if (Test-Path "app/exec/ffmpeg.exe") {
            Write-Host "FFmpeg successfully copied to app/exec"
          } else {
            Write-Error "Failed to copy FFmpeg to app/exec"
            exit 1
          }

      - name: Build with Yarn (includes both extension and executable)
        run: |
          echo "Building with yarn build..."
          $env:NO_WATCH = "true"
          yarn build
          
          # Check the results
          echo "Checking extension and executable files after build:"
          Get-ChildItem -Path "dist" -Recurse | Select-Object -First 20 FullName
        shell: pwsh
        
      - name: List dist directories
        shell: pwsh
        run: |
          Write-Host "Listing dist directory contents:"
          Get-ChildItem -Path "dist" -Recurse | Format-Table FullName
        
      - name: Ensure proper executable structure for NSIS
        shell: pwsh
        run: |
          # The NSIS script expects dist\YoutubetoPremiere.exe
          # Find the executable and copy it to the correct location
          $exePath = Get-ChildItem -Path "dist" -Recurse -Filter "YoutubetoPremiere.exe" | Select-Object -First 1
          
          if ($exePath) {
            Write-Host "Found executable at: $($exePath.FullName)"
            # Copy the executable to dist\YoutubetoPremiere.exe
            Copy-Item -Path $exePath.FullName -Destination "dist\YoutubetoPremiere.exe" -Force
            Write-Host "Copied executable to dist\YoutubetoPremiere.exe"
          } else {
            # Try to find any executable to debug
            $anyExe = Get-ChildItem -Path "dist" -Recurse -Filter "*.exe" | Select-Object -First 5
            Write-Host "Could not find YoutubetoPremiere.exe. Available executables:"
            $anyExe | Format-Table FullName
            
            # If there's any exe file, copy the first one as YoutubetoPremiere.exe as a fallback
            if ($anyExe -and $anyExe.Count -gt 0) {
              Write-Host "Using $($anyExe[0].FullName) as fallback"
              Copy-Item -Path $anyExe[0].FullName -Destination "dist\YoutubetoPremiere.exe" -Force
            } else {
              Write-Error "No executable files found in dist directory"
              exit 1
            }
          }
          
          # Verify the file exists
          if (Test-Path "dist\YoutubetoPremiere.exe") {
            Write-Host "Verified: dist\YoutubetoPremiere.exe exists"
          } else {
            Write-Error "Failed to create dist\YoutubetoPremiere.exe"
            exit 1
          }

      - name: Create CEP Extension Directory
        shell: pwsh
        run: |
          # Create directory for CEP extension
          New-Item -Path "dist/com.selgy.youtubetopremiere" -ItemType Directory -Force
          
          # Copy CEP extension files
          if (Test-Path "dist/cep") {
            Copy-Item -Path "dist/cep/*" -Destination "dist/com.selgy.youtubetopremiere/" -Recurse -Force
            Write-Host "CEP extension files copied successfully"
          } else {
            Write-Warning "CEP extension directory not found. The installer will be missing CEP files."
          }

      - name: Install NSIS
        run: choco install nsis

      - name: Download and Install NSIS Process Plugin
        run: |
          curl -L -o NsProcess.zip http://nsis.sourceforge.net/mediawiki/images/archive/1/18/20140806212030!NsProcess.zip
          Expand-Archive -Path NsProcess.zip -DestinationPath "NsProcess"
          New-Item -ItemType Directory -Force -Path "C:\Program Files (x86)\NSIS\Plugins\x86-unicode"
          New-Item -ItemType Directory -Force -Path "C:\Program Files (x86)\NSIS\Include"
          Move-Item -Path "NsProcess\Plugin\*" -Destination "C:\Program Files (x86)\NSIS\Plugins\x86-unicode" -Force
          Move-Item -Path "NsProcess\Include\*" -Destination "C:\Program Files (x86)\NSIS\Include" -Force
        shell: pwsh

      - name: Update installer version
        shell: pwsh
        run: |
          $content = Get-Content -Path "installer.nsi"
          $content = $content -replace '(!define VERSION "\$\{VERSION\}")', ('!define VERSION "${{ needs.prepare.outputs.version }}"')
          Set-Content -Path "installer.nsi" -Value $content
          
          # Verify the version was updated
          $updatedContent = Get-Content -Path "installer.nsi" | Select-String -Pattern "!define VERSION"
          Write-Host "Updated version in installer.nsi: $updatedContent"

      - name: List NSIS Plugin and Include Directories
        run: |
          ls "C:\Program Files (x86)\NSIS\Plugins\x86-unicode"
          ls "C:\Program Files (x86)\NSIS\Include"
        shell: pwsh

      - name: Debug dist directory before NSIS
        shell: pwsh
        run: |
          Write-Host "Listing dist directory structure before NSIS compilation:"
          Get-ChildItem -Path "dist" -Recurse | Format-Table FullName
          
          # Specifically check for the file NSIS is looking for
          if (Test-Path "dist\YoutubetoPremiere.exe") {
            Write-Host "FOUND: dist\YoutubetoPremiere.exe"
            $fileInfo = Get-Item "dist\YoutubetoPremiere.exe"
            Write-Host "File size: $($fileInfo.Length) bytes"
          } else {
            Write-Host "MISSING: dist\YoutubetoPremiere.exe"
          }

      - name: Compile Installer with NSIS
        run: |
          # Show the current directory
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Running installer.nsi compilation..."
          
          # Run NSIS with verbose output
          & "C:\Program Files (x86)\NSIS\makensis.exe" /V4 ./installer.nsi
          
          # Check if the installer was built
          if (Test-Path "YoutubetoPremiere-${{ needs.prepare.outputs.version }}-Setup.exe") {
            Write-Host "Installer built successfully!"
            Move-Item -Path "YoutubetoPremiere-${{ needs.prepare.outputs.version }}-Setup.exe" -Destination "YoutubetoPremiere_Win_${{ needs.prepare.outputs.version }}.exe" -Force
          } else {
            Write-Error "Installer build failed. No output file found."
            exit 1
          }
        shell: pwsh

      - name: List directory contents dist
        run: dir dist

      - name: Upload Windows package
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: YoutubetoPremiere_Win_${{ needs.prepare.outputs.version }}.exe
          retention-days: 7

  create-release:
    needs: [prepare, mac-build-apple-silicon, win-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Mac artifact
        uses: actions/download-artifact@v4
        with:
          name: mac-arm64-package
          
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-package
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_SECRET }}
        with:
          tag_name: ${{ github.ref_type == 'tag' && github.ref_name || format('v{0}', needs.prepare.outputs.version) }}
          name: YouTube to Premiere Pro ${{ needs.prepare.outputs.version }}
          draft: false
          prerelease: ${{ needs.prepare.outputs.is_prerelease == 'true' }}
          files: |
            *.pkg
            *.exe 