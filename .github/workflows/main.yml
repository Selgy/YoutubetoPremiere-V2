name: Build and Package

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-ffmpeg:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Download FFmpeg for Windows
        if: matrix.os == 'windows-latest'
        run: |
          $url = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
          Invoke-WebRequest -Uri $url -OutFile ffmpeg.zip
          Expand-Archive ffmpeg.zip -DestinationPath ffmpeg_temp
          New-Item -ItemType Directory -Force -Path src/exec
          Get-ChildItem -Path ffmpeg_temp -Recurse -Filter "ffmpeg.exe" | 
            Select-Object -First 1 | 
            ForEach-Object { 
              Copy-Item $_.FullName -Destination "src/exec/ffmpeg.exe"
              Write-Host "FFmpeg copied from: $($_.FullName)"
            }
          Write-Host "FFmpeg copied to src/exec/ffmpeg.exe"
        shell: pwsh

      - name: Download FFmpeg for macOS
        if: matrix.os == 'macos-latest'
        run: |
          curl -L https://evermeet.cx/ffmpeg/ffmpeg-6.1.zip -o ffmpeg.zip
          unzip ffmpeg.zip
          mkdir -p src/exec
          mv ffmpeg src/exec/
          chmod +x src/exec/ffmpeg
          echo "FFmpeg copied to src/exec/ffmpeg"

      - name: Upload FFmpeg artifact
        uses: actions/upload-artifact@v3
        with:
          name: ffmpeg-${{ matrix.os }}
          path: src/exec/

  build-executables:
    needs: build-ffmpeg
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt
          python -m pip install pygame
          
      - name: Download FFmpeg artifact
        uses: actions/download-artifact@v3
        with:
          name: ffmpeg-${{ matrix.os }}
          path: src/exec/
          
      - name: Make FFmpeg executable (macOS)
        if: matrix.os == 'macos-latest'
        run: chmod +x src/exec/ffmpeg
        
      - name: Build executable
        run: python -m PyInstaller YoutubetoPremiere.spec -y --workpath build/work --distpath build/YoutubetoPremiere
        shell: bash

      - name: Upload executable and FFmpeg artifact
        uses: actions/upload-artifact@v3
        with:
          name: executable-${{ matrix.os }}
          path: |
            build/YoutubetoPremiere/
            src/exec/ffmpeg*

  package-zxp:
    needs: build-executables
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Create directories
        run: |
          mkdir -p dist/cep/exec
          mkdir -p src/exec/sounds
        shell: bash

      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: executable-windows-latest
          path: dist/cep/exec/

      - name: Download macOS artifacts
        uses: actions/download-artifact@v3
        with:
          name: executable-macos-latest
          path: dist/cep/exec/

      - name: Copy sounds
        run: |
          if [ -d "src/exec/sounds" ]; then
            cp -r src/exec/sounds dist/cep/exec/
          fi
        shell: bash

      - name: Build ZXP
        run: yarn zxp

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            ./dist/zxp/*.zxp
          generate_release_notes: true
