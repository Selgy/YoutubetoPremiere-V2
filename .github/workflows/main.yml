name: ZXP Release

on:
  push:
    tags:
      - "*.*.*"

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            python-path: 'C:\hostedtoolcache\windows\Python\3.9.*\x64'
            node-path: 'C:\hostedtoolcache\windows\node\18.*\x64'
          - os: macos-latest
            python-path: '/Users/runner/hostedtoolcache/Python/3.9.*/x64'
            node-path: '/Users/runner/hostedtoolcache/node/18.*/x64'
    
    runs-on: ${{ matrix.os }}
    env:
      CERTIFICATE_BASE64: ${{ secrets.SIGNING_CERTIFICATE }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          echo "${{ matrix.node-path }}\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Setup Node.js (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          echo "${{ matrix.node-path }}/bin" >> $GITHUB_PATH
          
      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          brew install sdl2 pkg-config
          
      - name: Setup Python (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          echo "${{ matrix.python-path }}" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          python -m pip install --upgrade pip
          python -m pip install wheel setuptools
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Setup Python (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          python3 -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install wheel setuptools
          pip install -r requirements.txt
          pip install pyinstaller
          
      - name: Install Node dependencies
        shell: bash
        run: yarn install --frozen-lockfile

      - name: Debug Certificate Data
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          if [ -z "$CERTIFICATE_BASE64" ]; then
            echo "Certificate data is empty"
            exit 1
          fi
          echo "Certificate data length: ${#CERTIFICATE_BASE64}"

      - name: Create Certificate
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          # Create certificate from base64
          echo "$CERTIFICATE_BASE64" | base64 -d > certificate.p12
          # Check if certificate was created
          if [ ! -f certificate.p12 ]; then
            echo "Failed to create certificate"
            exit 1
          fi
          # Check certificate file size
          ls -l certificate.p12
          
      - name: Setup Keychain (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security list-keychains -d user -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -l build.keychain
          security import certificate.p12 -k build.keychain -P "$KEYCHAIN_PASSWORD" -T /usr/bin/codesign -A
          security list-keychains -s build.keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

      - name: Build macOS Executable
        if: matrix.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          source venv/bin/activate
          python -m PyInstaller YoutubetoPremiere.spec --target-arch universal2 --workpath build --distpath build
          codesign --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" --options runtime --timestamp --force --verbose=4 ./build/YoutubetoPremiere
          mkdir -p dist/cep/exec
          cp -r build/YoutubetoPremiere dist/cep/exec/YoutubetoPremiere
          mkdir -p dist/cep/exec/sounds
          cp -r app/sounds/* dist/cep/exec/sounds/

      - name: Build Windows Executable
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          python -m PyInstaller YoutubetoPremiere.spec --workpath build --distpath build
          New-Item -ItemType Directory -Force -Path dist/cep/exec
          Copy-Item build/YoutubetoPremiere.exe dist/cep/exec/YoutubetoPremiere.exe
          New-Item -ItemType Directory -Force -Path dist/cep/exec/sounds
          Copy-Item -Recurse -Force app/sounds/* dist/cep/exec/sounds/

      - name: Notarize macOS Executable
        if: matrix.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          ditto -c -k --keepParent ./dist/cep/exec/YoutubetoPremiere ./YoutubetoPremiere.zip
          xcrun notarytool submit ./YoutubetoPremiere.zip --wait --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$TEAM_ID"
          xcrun stapler staple ./dist/cep/exec/YoutubetoPremiere

      - name: Create Artifact
        run: |
          tar -czf dist-${{ matrix.os }}.tar.gz dist/

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist-${{ matrix.os }}
          path: dist-${{ matrix.os }}.tar.gz
          retention-days: 1

  package:
    needs: build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        run: |
          echo "C:\hostedtoolcache\windows\node\18.*\x64\bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Extract and merge artifacts
        shell: pwsh
        run: |
          foreach ($file in Get-ChildItem -Path artifacts/*/*.tar.gz) {
            tar -xzf $file
          }
          New-Item -ItemType Directory -Force -Path dist/cep/exec
          Copy-Item -Recurse -Force dist/cep/exec/* dist/cep/exec/
          yarn zxp

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            ./dist/zxp/com.YoutubetoPremiereV2.cep.zxp
          generate_release_notes: true
