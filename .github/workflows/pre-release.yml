name: Build and Package Pre-Release

on:
  push:
    branches:
      - Pre-released

permissions:
  contents: write
  actions: read

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set version
        id: version
        run: |
          VERSION="2.1.0-pre.$(date +'%Y%m%d%H%M')"
          echo "Setting version to $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  mac-build-apple-silicon:
    needs: prepare
    runs-on: macos-14
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install Node.js dependencies
        run: yarn install --frozen-lockfile

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.11'
          architecture: 'arm64'
          cache: 'pip'

      - name: Sync clock
        run: sudo sntp -sS time.windows.com

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install python-dotenv

      - name: Create and Configure Keychain
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/SelgykeyAPP.keychain-db
          
          # Import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Find certificate in custom keychain
          echo "Finding certificate in SelgykeyAPP keychain:"
          security find-certificate -a $KEYCHAIN_PATH
          
          # List all identities in custom keychain
          echo "Listing all identities in SelgykeyAPP keychain:"
          security find-identity -p codesigning $KEYCHAIN_PATH

      - name: Set DYLD_LIBRARY_PATH
        run: |
          echo "Setting DYLD_LIBRARY_PATH to include Python library path"
          echo "DYLD_LIBRARY_PATH=/Users/runner/hostedtoolcache/Python/3.10.11/arm64/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
        
      - name: Sign Python Library
        run: |
          echo "Signing Python library..."
          codesign --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" --timestamp --options runtime --force --verbose /Users/runner/hostedtoolcache/Python/3.10.11/arm64/lib/libpython3.10.dylib
      
      - name: Verify Signed Python Library
        run: |
          echo "Verifying signed Python library..."
          codesign --verify --verbose /Users/runner/hostedtoolcache/Python/3.10.11/arm64/lib/libpython3.10.dylib

      - name: Setup FFmpeg
        run: |
          echo "Setting up FFmpeg..."
          mkdir -p app/exec
          curl -L https://evermeet.cx/ffmpeg/ffmpeg-6.1.1.zip -o ffmpeg.zip
          unzip -q ffmpeg.zip
          mv ffmpeg app/exec/
          chmod +x app/exec/ffmpeg
          ls -la app/exec/
      
      - name: Build Extension with Yarn
        run: |
          echo "Building extension with yarn build-mac..."
          # Set NO_WATCH to true to prevent the build from watching for changes
          export NO_WATCH=true
          yarn build-mac
          
          # Check the results
          echo "Checking CEP extension files after build:"
          ls -la dist/cep/ || echo "dist/cep directory not found!"

      - name: Build Application with PyInstaller
        run: |
          pip install --upgrade pyinstaller
          pyinstaller --onedir --clean --debug=all \
            --hidden-import=engineio.async_drivers.eventlet \
            --hidden-import=engineio.async_drivers.gevent_uwsgi \
            --hidden-import=engineio.async_drivers.gevent \
            --hidden-import=engineio.async_drivers.threading \
            --hidden-import=engineio.async_drivers \
            --hidden-import=gevent \
            --hidden-import=websocket \
            --hidden-import=websockets \
            --hidden-import=wsproto \
            --hidden-import=pygame \
            --hidden-import=PIL \
            --hidden-import=flask \
            --add-binary "app/exec/ffmpeg:./exec/" \
            --hidden-import=flask_cors \
            --hidden-import=flask_socketio \
            --hidden-import=yt_dlp \
            --hidden-import=pymiere \
            --hidden-import=psutil \
            --hidden-import=tkinter \
            --hidden-import=yt_dlp \
            --add-data "./app/sounds/*:./sounds/" \
            --add-data "./app/*.py:./app/" \
            --icon "./icon.icns" \
            app/YoutubetoPremiere.py
          
          # Create version file
          echo "${{ needs.prepare.outputs.version }}" > dist/YoutubetoPremiere/version.txt
          
          # Copy CEP extension files to the YoutubetoPremiere directory
          mkdir -p dist/YoutubetoPremiere/com.selgy.youtubetopremiere
          cp -R dist/cep/* dist/YoutubetoPremiere/com.selgy.youtubetopremiere/ || echo "Error copying CEP files, check if dist/cep exists"
              
      - name: Verify Executable Contents
        run: |
          echo "Verifying executable contents..."
          ls -la ./dist/YoutubetoPremiere
          echo "Verifying CEP extension files:"
          ls -la ./dist/YoutubetoPremiere/com.selgy.youtubetopremiere || echo "CEP directory not found in application bundle"
        shell: /bin/bash -e {0}

      - name: Sign all binaries
        run: |
          find ./dist -type f -perm +111 -exec codesign --timestamp --options runtime --force --verify --verbose --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" {} \;
          
      - name: Sign the Application
        run: |
          # Sign the main application directory
          codesign --deep --timestamp --options runtime --force --verify --verbose --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" "./dist/YoutubetoPremiere"
          
          # Sign the main executable
          codesign --deep --timestamp --options runtime --force --verify --verbose --sign "Developer ID Application: mickael ducatez (9H8DB46V75)" "./dist/YoutubetoPremiere/YoutubetoPremiere"

      - name: "Notarize app bundle"
        env:
          MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.APPLE_ID }}
          MACOS_NOTARIZATION_PWD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
          MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo "Create keychain profile"
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$MACOS_NOTARIZATION_APPLE_ID" --team-id "$MACOS_NOTARIZATION_TEAM_ID" --password "$MACOS_NOTARIZATION_PWD"

          echo "Creating temp notarization archive"
          ditto -c -k --keepParent "./dist/YoutubetoPremiere" "notarization.zip"

          echo "Notarize app"
          NOTARIZATION_OUTPUT=$(xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait --output-format json)
          NOTARIZATION_ID=$(echo "$NOTARIZATION_OUTPUT" | jq -r '.id')
          
          if [[ $NOTARIZATION_ID == "null" ]]; then
              echo "Notarization submission failed."
              echo "Output: $NOTARIZATION_OUTPUT"
              exit 1
          fi

          # Check Notarization Status
          echo "Checking Notarization Status for $NOTARIZATION_ID"
          xcrun notarytool info $NOTARIZATION_ID --keychain-profile "notarytool-profile"

          # Fetch and display the notarization log
          echo "Fetching notarization log for $NOTARIZATION_ID..."
          xcrun notarytool log $NOTARIZATION_ID --keychain-profile "notarytool-profile"

      - name: Make postinstall script executable
        run: sudo chmod +x ./scripts/postinstall
            
      - name: Prepare PKG content
        run: |
          mkdir -p pkgroot
          cp -R "./dist/YoutubetoPremiere" "./pkgroot/"
    
      - name: Create and Sign PKG
        env:
          INSTALLER_CERTIFICATE_BASE64: ${{ secrets.INSTALLER_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.INSTALLER_P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/installer_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/Selgykey.keychain-db

          # Decode and import installer certificate from secrets
          echo -n "$INSTALLER_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # Create temporary keychain for installer certificate
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH

          # Set the keychain for codesigning
          security list-keychain -d user -s $KEYCHAIN_PATH

          PACKAGE_IDENTIFIER="com.selgy.youtubetopremiere"
          PACKAGE_VERSION="${{ needs.prepare.outputs.version }}"
          PKG_ROOT="./pkgroot"
          OUTPUT_PKG="YoutubetoPremiere.pkg"
          SCRIPTS_DIR="./scripts"
          
          ls -la pkgroot/

          pkgbuild --root "$PKG_ROOT" \
            --identifier "$PACKAGE_IDENTIFIER" \
            --version "$PACKAGE_VERSION" \
            --install-location "/Applications" \
            --scripts "$SCRIPTS_DIR" \
            "$OUTPUT_PKG"

          # Sign the package with the installer certificate
          PRODUCTSIGN_IDENTITY=$(security find-identity -v -p basic "$KEYCHAIN_PATH" | grep 'Developer ID Installer' | head -n 1 | awk '{print $2}')
          productsign --sign "$PRODUCTSIGN_IDENTITY" "$OUTPUT_PKG" "signed_$OUTPUT_PKG"

          # Verify the signed package
          pkgutil --check-signature "signed_$OUTPUT_PKG"

          # Remove temporary keychain
          security delete-keychain $KEYCHAIN_PATH

      - name: Notarize PKG Installer
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
        run: |
          # Store the notarization credentials
          echo "Create keychain profile for notarization"
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "$APPLE_ID" --team-id "$APPLE_TEAM_ID" --password "$APP_SPECIFIC_PASSWORD"
          
          # Create a ZIP file of the .pkg for notarization
          echo "Creating temp notarization archive for PKG"
          ditto -c -k --keepParent "signed_YoutubetoPremiere.pkg" "notarization_pkg.zip"
          
          # Send the notarization request for the PKG and capture the NOTARIZATION_ID
          echo "Notarize PKG"
          NOTARIZATION_OUTPUT=$(xcrun notarytool submit "notarization_pkg.zip" --keychain-profile "notarytool-profile" --wait --output-format json)
          NOTARIZATION_ID=$(echo "$NOTARIZATION_OUTPUT" | jq -r '.id')
          echo "Notarization ID for PKG: $NOTARIZATION_ID"
                 
      - name: Rename PKG file
        run: mv signed_YoutubetoPremiere.pkg YoutubetoPremiere_Mac_arm64.pkg
        
      - name: Upload Mac ARM64 package
        uses: actions/upload-artifact@v4
        with:
          name: mac-arm64-package
          path: YoutubetoPremiere_Mac_arm64.pkg
          retention-days: 7

  win-build:
    needs: prepare
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install Node.js dependencies
        run: yarn install --frozen-lockfile

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9.0'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Extension with Yarn
        run: |
          echo "Building extension with yarn build..."
          $env:NO_WATCH = "true"
          yarn build
          
          # Check the results
          echo "Checking CEP extension files after build:"
          if (Test-Path "dist/cep") {
              Get-ChildItem -Path "dist\cep" -Recurse | Select-Object FullName
          } else {
              echo "dist/cep directory not found!"
          }
        shell: pwsh

      - name: Download FFmpeg
        run: |
          mkdir ffmpeg
          curl -L https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full.7z -o ffmpeg.7z

      - name: Extract FFmpeg
        run: |
          7z x ffmpeg.7z -offmpeg -aoa

      - name: List FFmpeg directory
        run: |
          dir ffmpeg
        shell: pwsh
          
      - name: Rename FFmpeg Folder
        run: |
          $ffmpegDir = Get-ChildItem -Path ./ffmpeg -Directory | Select-Object -First 1
          Rename-Item -Path $ffmpegDir.FullName -NewName "ffmpeg_win"
          Move-Item -Path ./ffmpeg/ffmpeg_win -Destination ./
        shell: pwsh

      - name: Find ffmpeg.exe
        shell: pwsh
        run: |
          Get-ChildItem -Recurse -Filter ffmpeg.exe | Format-Table FullName

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build Application with PyInstaller
        run: |
          pyinstaller --onefile --clean --debug all `
            --hidden-import=engineio.async_drivers.eventlet `
            --hidden-import=engineio.async_drivers.gevent_uwsgi `
            --hidden-import=engineio.async_drivers.gevent `
            --hidden-import=engineio.async_drivers `
            --hidden-import=gevent `
            --hidden-import=engineio.async_drivers.threading `
            --hidden-import=pygame.freetype `
            --hidden-import=os `
            --hidden-import=time `
            --hidden-import=pygame.mixer `
            --hidden-import=yt_dlp `
            --hidden-import=pymiere `
            --hidden-import=sys `
            --hidden-import=logging `
            --hidden-import=flask_cors `
            --hidden-import=flask `
            --add-binary "app\_Include\yt-dlp.exe;app/_Include/" `
            --hidden-import=flask_socketio `
            --hidden-import=json `
            --hidden-import=threading `
            --hidden-import=PIL `
            --hidden-import=re `
            --hidden-import=psutil `
            --hidden-import=tkinter `
            --hidden-import=subprocess `
            --add-binary "./ffmpeg_win/bin/ffmpeg.exe;./ffmpeg_win/bin/" `
            --add-data "./app/sounds/*;./sounds/" `
            --add-data "./app/*.py;./app/" `
            --icon "./icon.ico" `
            app/YoutubetoPremiere.py
            
          # Create version file
          Set-Content -Path "dist/version.txt" -Value "${{ needs.prepare.outputs.version }}"
          
          # Create directory for CEP extension and copy files
          New-Item -Path "dist/com.selgy.youtubetopremiere" -ItemType Directory -Force
          if (Test-Path "dist/cep") {
            Copy-Item -Path "dist/cep/*" -Destination "dist/com.selgy.youtubetopremiere/" -Recurse -Force
          } else {
            Write-Warning "CEP extension directory not found. The installer will be missing CEP files."
          }
        shell: pwsh

      - name: Install NSIS
        run: choco install nsis

      - name: Download and Install NSIS Process Plugin
        run: |
          curl -L -o NsProcess.zip http://nsis.sourceforge.net/mediawiki/images/archive/1/18/20140806212030!NsProcess.zip
          Expand-Archive -Path NsProcess.zip -DestinationPath "NsProcess"
          New-Item -ItemType Directory -Force -Path "C:\Program Files (x86)\NSIS\Plugins\x86-unicode"
          New-Item -ItemType Directory -Force -Path "C:\Program Files (x86)\NSIS\Include"
          Move-Item -Path "NsProcess\Plugin\*" -Destination "C:\Program Files (x86)\NSIS\Plugins\x86-unicode" -Force
          Move-Item -Path "NsProcess\Include\*" -Destination "C:\Program Files (x86)\NSIS\Include" -Force
        shell: pwsh

      - name: Update installer version
        shell: pwsh
        run: |
          $content = Get-Content -Path "installer.nsi"
          $content = $content -replace '(!define VERSION "\$\{VERSION\}")', ('!define VERSION "${{ needs.prepare.outputs.version }}"')
          Set-Content -Path "installer.nsi" -Value $content

      - name: List NSIS Plugin and Include Directories
        run: |
          ls "C:\Program Files (x86)\NSIS\Plugins\x86-unicode"
          ls "C:\Program Files (x86)\NSIS\Include"
        shell: pwsh

      - name: Compile Installer with NSIS
        run: |
          makensis ./installer.nsi
          Move-Item -Path "YoutubetoPremiere-${{ needs.prepare.outputs.version }}-Setup.exe" -Destination "YoutubetoPremiere_Win.exe"
        shell: pwsh

      - name: List directory contents dist
        run: dir dist

      - name: Upload Windows package
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: YoutubetoPremiere_Win.exe
          retention-days: 7

  create-release:
    needs: [prepare, mac-build-apple-silicon, win-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download Mac artifact
        uses: actions/download-artifact@v4
        with:
          name: mac-arm64-package
          
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-package
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_SECRET }}
        with:
          tag_name: V2.1
          name: YouTube to Premiere Pro V2.1
          draft: ${{ github.ref == 'refs/heads/master' }}
          prerelease: true
          files: |
            YoutubetoPremiere_Mac_arm64.pkg
            YoutubetoPremiere_Win.exe 